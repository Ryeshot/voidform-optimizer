{"version":3,"sources":["components/ResourceBar.js","components/CooldownSweep.js","lib/events.js","lib/abilityEvents.js","utils/eventHandler.js","lib/constants.js","utils/ability.js","components/ProgressAbility.js","components/GlobalCooldown.js","components/CastBar.js","components/AbilityBar.js","components/auras/Aura.js","components/auras/LingeringInsanity.js","components/auras/Voidform.js","components/auras/DamageOverTime.js","lib/options.js","components/auras/AuraBar.js","components/panels/Panel.js","utils/hooks.js","lib/abilitySettings.js","lib/auraSettings.js","utils/importExport.js","components/panels/ExportPanel.js","components/panels/optionFactory.js","components/panels/SettingOption.js","components/panels/WhatIs.js","components/panels/CustomizeSection.js","components/panels/SettingsPanel.js","components/panels/AbilityKeybindsPanel.js","components/panels/AboutPanel.js","lib/abilities.js","components/forms/FormTextAreaField.js","components/forms/FormTextField.js","utils/bugreport.js","components/forms/BugReport.js","components/forms/FeatureRequest.js","components/forms/Forms.js","App.js","serviceWorker.js","index.js"],"names":["ResourceBar","props","max","current","voidform","className","toFixed","style","width","CooldownSweep","size","progress","inverse","stroke","normalizedRadius","circumference","Math","PI","height","fill","strokeWidth","strokeOpacity","strokeDasharray","strokeDashoffset","cx","cy","r","events","abilityEvents","onEvent","EventHandler","eventTriggers","this","event","payload","forEach","e","type","keybinds","Ability","initialState","updateFn","onExecute","eventHandler","state","updateState","charges","maxCharges","currentState","Object","keys","k","value","subState","k2","value2","now","Date","startTime","cooldown","duration","getCurrentState","name","cooldownTimer","setInterval","remaining","interval","clearInterval","startCooldown","handleEvent","time","displayName","resource","cast","castTimer","setTimeout","currentlyOnCooldown","endTime","channel","baseDuration","ticks","pandemicTime","currentTicks","channelTimer","previousChannelRemaining","previousChannelFrequency","min","floor","channelFrequency","round","baseChannelTime","globalCooldown","globalCooldownTimer","clearTimeout","triggers","trigger","eventTypes","constructEventHandler","InstantAbility","CastAbility","ChannelAbility","unusable","casting","startCast","startChannel","ProgressAbility","settings","globalCooldownStartTime","casttime","castStartTime","castEndTime","icon","keybind","subscribe","unsubscribe","onAbilityUpdate","triggerEvent","reset","useState","setState","key","keybindText","startTimeRef","useRef","cooldownRef","castStartTimeRef","castEndTimeRef","casttimeRef","castingRef","baseChannelTimeRef","chargesRef","globalCooldownRef","globalCooldownStartTimeRef","ability","useEffect","create","source","execute","notify","beginGlobalCooldown","getRemainingCooldown","remove","onClick","src","GlobalCooldown","start","console","log","gcd","CastBar","direction","setCurrent","timeRef","durationRef","timer","AbilityBar","abilitySettings","abilities","haste","inVoidform","keyEventsPaused","hasteRef","inVoidformRef","spellQueueTimer","observers","setObservers","voidformEntered","setVoidformEntered","observersRef","defaultState","cooldowns","disabled","defaultCooldowns","status","triggerCooldown","document","addEventListener","handleKeyPress","removeEventListener","useReducer","oldState","action","newState","JSON","parse","stringify","rankTwo","error","o","abilityCooldownRemaining","globalCooldownRemaining","queueAbility","calculateCooldown","triggerGlobalCooldown","gcdLength","observer","obs","filter","getAbilityCooldown","cdr","hasted","map","i","Aura","maxDuration","stacks","children","LingeringInsanity","setMaxDuration","setDuration","stacksRef","initialize","afterVoidformEntry","hasteRetention","currentMaxDuration","calculateDecayStacks","voidformHaste","hasteDecay","ceil","startStatic","decayRate","startDecay","Voidform","drainRate","drainStart","hasteStack","hasteStart","maxStacks","paused","active","setStacks","pausedRef","n","frequency","drain","startingHaste","DamageOverTime","maxDurationRef","calculateNextTickTime","tickTime","commonOptions","whatIs","unit","resourceCast","resourceChannel","castTime","channelTime","auraDuration","auraTicks","auraResource","abilityOptions","auraOptions","options","AuraBar","auras","lingeringInsanity","swpName","vtName","Panel","panel","currentPanel","handleClose","header","panelClass","target","cleanup","ref","useCleanup","defaultAbilitySettings","extension","threshold","defaultAuraSettings","stats","parseAbilitySettings","result","a","Error","abilitySetting","reduce","obj","userSetting","setting","undefined","parseAbility","parseAuraSettings","auraSettings","aura","auraSetting","parseAura","formatAbilitySettingsForExport","formattedAbility","formatAbilityConfig","includeKeybinds","ExportPanel","onImport","closePanel","exportData","setExportData","inputData","setInputData","setIncludeKeybinds","transform","rows","cols","placeholder","onChange","data","checked","parsedSettings","Base64","decode","abilityConfig","message","importSettings","id","readOnly","currentSettings","formattedAbilitySettings","formattedAbilityConfig","combined","encode","exportSettings","getElementById","select","execCommand","err","TimeTextOption","step","parseFloat","NumberTextOption","parseInt","FloatTextOption","PercentTextOption","BooleanOption","defaultChecked","SelectOption","handleChange","htmlFor","Option","rest","SettingOption","onHelp","closeHelp","parentKey","onMouseEnter","pos","x","offsetLeft","y","offsetTop","onMouseLeave","v","WhatIs","text","xPos","yPos","left","top","CustomizeSection","showWhatIs","setShowWhatIs","setWhatIs","optionKey","option","newSetting","handleShowWhatIs","closeWhatIs","SettingsPanel","onAbilitySet","onAuraSet","changesPendingText","currentAbilities","setCurrentAbilities","currentAuras","setCurrentAuras","activeAbilitySection","setActiveAbilitySection","activeAuraSection","setActiveAuraSection","abilityChangesPending","setAbilityChangesPending","auraChangesPending","setAuraChangesPending","showAbilityOptions","settingKey","getAttribute","showAuraOptions","newAbilities","newAuras","AbilityKeybindsPanel","onKeybind","onToggle","onPause","tooltip","setTooltip","setKeybindText","currentAbility","setCurrentAbility","currentAbilityRef","showToolTip","alt","hideToolTip","prepareToBindAbility","bindAbility","once","match","toUpperCase","visibility","toString","onMouseOver","onMouseOut","AboutPanel","defaultAbilities","FormTextAreaField","label","placeHolder","required","FormTextField","email","window","Email","formatBugReportContent","body","headers","content","concat","join","sendBugReport","title","SecureToken","process","From","To","Subject","Body","send","submitBugReport","onSuccess","onFail","fields","titleField","BugReport","closeForm","setData","canSubmit","setCanSubmit","submitMessage","setSubmitMessage","onSubmit","preventDefault","setText","count","repeat","createPendingTextTimer","f","FeatureRequest","Forms","showBugReport","setShowBugReport","showFeatureRequest","setShowFeatureRequest","App","setPanel","setAbilitySettings","setAbilities","setAuraSettings","setKeyEventsPaused","setReset","setHaste","pandemicDuration","handleAuraPandemic","d","dot","calculateHaste","handlePanelHeaderClick","handlePanelClose","setAllAbilities","importedAbilities","handleAuraSet","handleAuraReset","handleAbilitySet","handleAbilityReset","merged","voidBoltOrEruption","newSettings","Boolean","location","hostname","dotenv","config","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a16928c7.chunk.js","sourcesContent":["import React, {useState, useEffect, useReducer} from 'react';\r\nimport \"./ResourceBar.css\"\r\n\r\nconst ResourceBar = (props) => {\r\n    const {max, current, voidform} = props\r\n\r\n    return (\r\n        <div className=\"progress-bar-container\">\r\n            <div className=\"progress-text\">{(current/max*100).toFixed(0)}</div> \r\n            <div className=\"progress-bar resource-bar\" \r\n                style={{\r\n                    width: `${(current/max*100).toFixed(2)}%`\r\n            }}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResourceBar","import React, {useState, useEffect, useRef} from 'react';\r\n\r\nimport \"./CooldownSweep.css\"\r\n\r\nconst CooldownSweep = (props) => {\r\n\r\n    const {size, progress, inverse} = props\r\n\r\n    const radius = size * 2\r\n    const stroke = size * 2\r\n\r\n    const normalizedRadius = radius - (stroke/2)\r\n    const circumference = normalizedRadius * 2 * Math.PI\r\n\r\n    return (\r\n        <svg width={size} height={size}>\r\n            <circle\r\n                fill=\"transparent\"\r\n                strokeWidth={stroke}\r\n                strokeOpacity={.7}\r\n                strokeDasharray={circumference + \" \" + circumference}\r\n                strokeDashoffset={inverse ? ((!progress ? circumference : 0) + (progress || 0) * circumference) : (circumference + (progress || 0) * circumference)}\r\n                stroke={\"rgb(0,0,0)\"}\r\n                cx={size/2}\r\n                cy={size/2}\r\n                r={normalizedRadius} />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default CooldownSweep","const events = {\r\n    \"CAST\": [\r\n        \"ABILITY_CAST_SUCCESS\",\r\n        \"ABILITY_COOLDOWN_START\",\r\n        \"ABILITY_COOLDOWN_END\",\r\n        \"ABILITY_CAST_START\",\r\n        \"ABILITY_CHANNEL_START\",\r\n        \"ABILITY_CHANNEL_UPDATE\",\r\n        \"ABILITY_CHANNEL_END\"\r\n    ],\r\n    \"RESOURCE\": [\r\n        \"RESOURCE_UPDATE\",\r\n        \"INSANITY_DRAIN_PAUSE_START\",\r\n        \"INSANITY_DRAIN_PAUSE_END\"\r\n    ],\r\n    \"AURA\": [\r\n        \"VOIDFORM_START\",\r\n        \"VOIDFORM_UPDATE\",\r\n        \"VOIDFORM_END\",\r\n        \"LINGERING_INSANITY_START\",\r\n        \"LINGERING_INSANITY_UPDATE\",\r\n        \"LINGERING_INSANITY_END\",\r\n        \"AURA_START\",\r\n        \"AURA_END\",\r\n        \"DOT_EXTEND\"\r\n    ],\r\n    \"STAT\": [\"HASTE_UPDATE\"]\r\n}\r\n\r\nexport default events","const abilityEvents = {\r\n    \"void-bolt\": {\r\n        onEvent: {\r\n            \"COOLDOWN_START\": [\"ABILITY_COOLDOWN_START\"],\r\n            \"COOLDOWN_END\": [\"ABILITY_COOLDOWN_END\"],\r\n            \"CAST_SUCCESS\": [\"ABILITY_CAST_SUCCESS\", \"RESOURCE_UPDATE\", \"DOT_EXTEND\"]\r\n        }\r\n    },\r\n    \"mind-flay\": {\r\n        onEvent: {\r\n            \"COOLDOWN_START\": [],\r\n            \"COOLDOWN_END\": [],\r\n            \"CHANNEL_START\": [\"ABILITY_CHANNEL_START\"],\r\n            \"CHANNEL_UPDATE\": [\"RESOURCE_UPDATE\"],\r\n            \"CHANNEL_END\": [\"ABILITY_CHANNEL_END\"]\r\n        }\r\n    },\r\n    \"void-eruption\": {\r\n        onEvent: {\r\n            \"CAST_START\": [\"ABILITY_CAST_START\"],\r\n            \"CAST_SUCCESS\": [\"ABILITY_CAST_SUCCESS\", \"VOIDFORM_START\"]\r\n        }\r\n    },\r\n    \"mind-blast\": {\r\n        onEvent: {\r\n            \"CAST_START\": [\"ABILITY_CAST_START\"],\r\n            \"CAST_SUCCESS\": [\"ABILITY_CAST_SUCCESS\", \"RESOURCE_UPDATE\"],\r\n            \"COOLDOWN_START\": [\"ABILITY_COOLDOWN_START\"],\r\n            \"COOLDOWN_END\": [\"ABILITY_COOLDOWN_END\"]\r\n        }\r\n    },\r\n    \"shadow-word-death\": {\r\n        onEvent: {\r\n            \"COOLDOWN_START\": [\"ABILITY_COOLDOWN_START\"],\r\n            \"COOLDOWN_END\": [\"ABILITY_COOLDOWN_END\"],\r\n            \"CAST_SUCCESS\": [\"ABILITY_CAST_SUCCESS\", \"RESOURCE_UPDATE\"]\r\n        }\r\n    },\r\n    \"void-torrent\": {\r\n        onEvent: {\r\n            \"COOLDOWN_START\": [\"ABILITY_COOLDOWN_START\"],\r\n            \"COOLDOWN_END\": [\"ABILITY_COOLDOWN_END\"],\r\n            \"CHANNEL_START\": [\"ABILITY_CHANNEL_START\", \"INSANITY_DRAIN_PAUSE_START\"],\r\n            \"CHANNEL_UPDATE\": [\"RESOURCE_UPDATE\"],\r\n            \"CHANNEL_END\": [\"ABILITY_CHANNEL_END\", \"INSANITY_DRAIN_PAUSE_END\"]\r\n        }\r\n    },\r\n    \"shadow-word-pain\": {\r\n        onEvent: {\r\n            \"CAST_SUCCESS\": [\"ABILITY_CAST_SUCCESS\", \"AURA_START\", \"RESOURCE_UPDATE\"]\r\n        }\r\n    },\r\n    \"vampiric-touch\": {\r\n        onEvent: {\r\n            \"CAST_START\": [\"ABILITY_CAST_START\"],\r\n            \"CAST_SUCCESS\": [\"ABILITY_CAST_SUCCESS\", \"AURA_START\", \"RESOURCE_UPDATE\"]\r\n        }\r\n    }\r\n}\r\n\r\nexport default abilityEvents","import events from \"../lib/events\"\r\nimport abilityEvents from \"../lib/abilityEvents\"\r\n\r\nclass EventHandler {\r\n\r\n    constructor(eventTriggers, events) {\r\n        this.eventTriggers = eventTriggers\r\n        this.events = events\r\n    }\r\n\r\n    handleEvent(event, payload) {\r\n        if(!this.events[event]) return\r\n        //console.log(event)\r\n        this.events[event].forEach(e => this.eventTriggers[e]({\r\n            type: e,\r\n            payload\r\n        }))\r\n    }\r\n}\r\n\r\nexport const constructEventHandler = (name, triggers) => {\r\n    const eventTriggers = {}\r\n\r\n    triggers.forEach(trigger => {\r\n        let types = trigger.eventTypes\r\n        types.forEach(type => {\r\n            events[type].forEach(e => eventTriggers[e] = trigger.trigger)\r\n        })\r\n    })\r\n\r\n    return new EventHandler(eventTriggers, abilityEvents[name].onEvent)\r\n}","export const interval = 20\r\nexport const lag = 50\r\nexport const spellQueueWindow = 250\r\nexport const keybinds = {\r\n    \"!\": \"S-1\",\r\n    \"@\": \"S-2\",\r\n    \"#\": \"S-3\",\r\n    \"$\": \"S-4\",\r\n    \"%\": \"S-5\",\r\n    \"^\": \"S-6\",\r\n    \"&\": \"S-7\",\r\n    \"*\": \"S-8\",\r\n    \"(\": \"S-9\",\r\n    \")\": \"S-0\"\r\n}","import {constructEventHandler} from \"./eventHandler\"\r\nimport {interval, lag} from \"../lib/constants\"\r\n\r\nclass Ability {\r\n\r\n    constructor(initialState, updateFn, onExecute, eventHandler) {\r\n        this.state = initialState\r\n        this.updateState = updateFn\r\n        this.onExecute = onExecute\r\n        this.eventHandler = eventHandler\r\n        this.updateState({\r\n            progress: 0,\r\n            charges: initialState.charges.maxCharges || 1\r\n        })       \r\n    }\r\n\r\n    static create(type, initialState, updateFn, onExecute, triggers) {\r\n        const eventHandler = constructEventHandler(initialState.name, triggers)\r\n        switch(type) {\r\n            case \"instant\":\r\n                return new InstantAbility(initialState, updateFn, onExecute, eventHandler)\r\n            case \"cast\":\r\n                return new CastAbility(initialState, updateFn, onExecute, eventHandler)\r\n            case \"channel\":\r\n                return new ChannelAbility(initialState, updateFn, onExecute, eventHandler)\r\n        }\r\n    }\r\n\r\n    getCurrentState() {\r\n        const currentState = {}\r\n        let state = this.state\r\n\r\n        Object.keys(state).forEach(k => {\r\n            let value = state[k]\r\n            if(typeof value !== \"object\") {\r\n                currentState[k] = value\r\n                return\r\n            }\r\n\r\n            const subState = {}\r\n            Object.keys(value).forEach(k2 => {\r\n                let value2 = value[k2]\r\n                if(value2 === \"undefined\") return\r\n                subState[k2] =  typeof value2 !== \"object\" ? value2 : value2.current\r\n            })\r\n            currentState[k] = subState\r\n        })\r\n\r\n        return currentState\r\n    }\r\n\r\n    getRemainingCooldown() {\r\n        const now = Date.now()\r\n        const startTime = this.state.cooldown.startTime.current\r\n        const duration = startTime ? this.state.cooldown.duration.current : 0\r\n        const charges = this.state.charges.current.current\r\n        const remaining = charges === 0 ? ((startTime || now) + duration) - now : 0\r\n\r\n        return remaining\r\n    }\r\n\r\n    startCooldown() {\r\n        let state = this.getCurrentState()\r\n        const {name} = state\r\n        const {maxCharges} = state.charges\r\n\r\n        this.cooldownTimer = setInterval(() => {\r\n            let now = Date.now()\r\n\r\n            let duration = this.state.cooldown.duration.current\r\n            let startTime = this.state.cooldown.startTime.current || now\r\n            let charges = this.state.charges.current.current\r\n            let remaining = (startTime + duration) - now\r\n\r\n            if(remaining <= interval + lag) {\r\n                this.updateState(state => {\r\n                    return {...state, charges: charges+1}\r\n                })\r\n\r\n                clearInterval(this.cooldownTimer)\r\n\r\n                if(maxCharges && charges < maxCharges - 1) {\r\n                    this.startCooldown()\r\n                    return\r\n                }\r\n\r\n                this.eventHandler.handleEvent(\"COOLDOWN_END\", {name})\r\n\r\n                this.updateState(state => {\r\n                    return {...state, progress: 0}\r\n                })\r\n\r\n                return\r\n            }\r\n            this.updateState(state => {\r\n                return {...state, progress: remaining/duration}\r\n            })\r\n\r\n        }, interval)\r\n\r\n        this.eventHandler.handleEvent(\"COOLDOWN_START\", {\r\n            name,\r\n            time: Date.now()\r\n        })\r\n    }\r\n\r\n    startCast() {\r\n        let state = this.getCurrentState()\r\n        const {name, displayName, resource} = state\r\n        const {duration} = state.cast\r\n\r\n        this.castTimer = setTimeout(() => {\r\n            this.eventHandler.handleEvent(\"CAST_SUCCESS\", {\r\n                name,\r\n                resource,\r\n                time: Date.now()\r\n            })\r\n\r\n            let cooldown = this.state.cooldown.duration.current\r\n            let currentlyOnCooldown = this.state.cooldown.startTime.current\r\n            let charges = this.state.charges.current.current\r\n\r\n            if(cooldown) {\r\n                this.updateState(state => {\r\n                    return {...state, charges: charges-1}\r\n                })\r\n                if(currentlyOnCooldown) return               \r\n                this.startCooldown()\r\n            }\r\n\r\n        }, duration)\r\n\r\n        this.eventHandler.handleEvent(\"CAST_START\", {\r\n            name,\r\n            displayName,\r\n            duration,\r\n            time: Date.now()\r\n        })\r\n    }\r\n\r\n    startChannel() {\r\n        let state = this.getCurrentState()\r\n        const {startTime, endTime, duration} = state.cast\r\n        const {baseDuration, ticks} = state.channel\r\n        const {name, displayName, resource} = state\r\n\r\n        let now = Date.now()\r\n        let pandemicTime = 0\r\n        let currentTicks = ticks\r\n\r\n        if(startTime) {\r\n            clearInterval(this.channelTimer)\r\n            let previousChannelTime = endTime - startTime\r\n            let previousChannelRemaining = previousChannelTime - (now - startTime)\r\n            let previousChannelFrequency = (baseDuration/currentTicks)        \r\n            pandemicTime = Math.min(previousChannelRemaining, baseDuration * .3)\r\n            let remainingTicks = Math.floor(pandemicTime/previousChannelFrequency)\r\n            currentTicks += remainingTicks\r\n        }\r\n\r\n        let channelFrequency = Math.round((duration+pandemicTime)/currentTicks)\r\n\r\n        this.channelTimer = setInterval(() => {\r\n\r\n            let now = Date.now()\r\n            let endTime = this.state.cast.endTime.current\r\n\r\n            //another cast has stopped this channel, don't update\r\n            if(!endTime) {\r\n                clearInterval(this.channelTimer)\r\n\r\n                this.eventHandler.handleEvent(\"CHANNEL_END\", {\r\n                    name\r\n                })\r\n                return\r\n            }\r\n\r\n            this.eventHandler.handleEvent(\"CHANNEL_UPDATE\", {\r\n                resource: resource/ticks\r\n            })\r\n\r\n            if(now >= endTime) {\r\n                clearInterval(this.channelTimer)\r\n\r\n                this.eventHandler.handleEvent(\"CHANNEL_END\", {\r\n                    name\r\n                })\r\n                return\r\n            }\r\n\r\n        }, channelFrequency)\r\n\r\n        this.eventHandler.handleEvent(\"CHANNEL_START\", {\r\n            name,\r\n            displayName,\r\n            duration: duration + pandemicTime,\r\n            time: now,\r\n            baseChannelTime: duration\r\n        })\r\n    }\r\n\r\n    beginGlobalCooldown() {\r\n        let state = this.getCurrentState()\r\n        const {duration, startTime} = state.globalCooldown\r\n\r\n        if(state.cooldown.startTime) {\r\n            let remaining = (state.cooldown.startTime + state.cooldown.duration) - startTime\r\n            if(remaining > duration) return\r\n        }\r\n\r\n        this.globalCooldownTimer = setInterval(() => {\r\n            let now = Date.now()\r\n            let remaining = (startTime + duration) - now\r\n            if(remaining <= interval) {\r\n                clearInterval(this.globalCooldownTimer)\r\n                             \r\n                return\r\n            }\r\n\r\n            if(this.state.cooldown.startTime.current) return\r\n            this.updateState(state => {\r\n                return {...state, progress: remaining/duration}\r\n            })\r\n        }, interval)\r\n    }\r\n\r\n    remove() {\r\n        clearInterval(this.cooldownTimer)\r\n        clearInterval(this.globalCooldownTimer)\r\n        clearInterval(this.channelTimer)\r\n        clearTimeout(this.castTimer)\r\n    }\r\n}\r\n\r\nclass InstantAbility extends Ability {\r\n\r\n    execute() {\r\n        if(this.state.unusable) return\r\n        if(this.state.cast.casting.current) return\r\n        let state = this.getCurrentState()\r\n        const {name, resource} = state\r\n        const {startTime} = state.cooldown\r\n        const {maxCharges, current} = state.charges\r\n\r\n        if(startTime && current === 0) return      \r\n        this.updateState(state => {\r\n            return {...state, charges: current-1}\r\n        })\r\n\r\n        this.eventHandler.handleEvent(\"CAST_SUCCESS\", {\r\n            name,\r\n            resource,\r\n            time: Date.now()\r\n        })\r\n\r\n        this.onExecute()\r\n        if(maxCharges && current < maxCharges) return\r\n        this.startCooldown()\r\n    }\r\n}\r\n\r\nclass CastAbility extends Ability {\r\n\r\n    execute() {\r\n        if(this.state.unusable) return\r\n        if(this.state.cast.casting.current) return\r\n        let state = this.getCurrentState()\r\n        const {startTime} = state.cast\r\n        const {current} = state.charges\r\n\r\n        if(startTime || current === 0) return\r\n        this.startCast()\r\n        this.onExecute()\r\n    }\r\n}\r\n\r\nclass ChannelAbility extends Ability {\r\n\r\n    execute() {\r\n        if(this.state.unusable) return\r\n        if(this.state.cast.casting.current) return\r\n        let state = this.getCurrentState()\r\n        const {duration, startTime} = state.cooldown\r\n\r\n        if(startTime) return\r\n        this.startChannel()\r\n        if(duration) {\r\n            this.startCooldown()\r\n        }\r\n        this.onExecute()\r\n    }\r\n}\r\n\r\nexport default Ability","import React, {useState, useEffect, useRef} from 'react';\r\nimport \"./ProgressAbility.css\"\r\nimport CooldownSweep from \"./CooldownSweep\"\r\nimport Ability from \"../utils/ability\"\r\n\r\nconst ProgressAbility = (props) => {\r\n\r\n    const {name, displayName, settings, cooldown, globalCooldown, globalCooldownStartTime, unusable, startTime, casttime, castStartTime, castEndTime, icon, baseChannelTime, keybind, casting, subscribe, unsubscribe, onExecute, onAbilityUpdate, triggerEvent, reset} = props\r\n\r\n    const size = 50\r\n\r\n    const [state, setState] = useState({})\r\n\r\n    const {key, keybindText} = keybind\r\n    const {type, resource, charges, ticks} = settings\r\n\r\n    //cooldown states\r\n    const startTimeRef = useRef(startTime)\r\n    const cooldownRef = useRef(cooldown)\r\n\r\n    startTimeRef.current = startTime\r\n    cooldownRef.current = cooldown\r\n\r\n    //cast states\r\n    const castStartTimeRef = useRef(castStartTime)\r\n    const castEndTimeRef = useRef(castEndTime)\r\n    const casttimeRef = useRef(casttime)\r\n    const castingRef = useRef(casting)\r\n\r\n    castStartTimeRef.current = castStartTime\r\n    castEndTimeRef.current = castEndTime\r\n    casttimeRef.current = casttime\r\n    castingRef.current = casting\r\n\r\n    //channel states\r\n    const baseChannelTimeRef = useRef(baseChannelTime)\r\n\r\n    baseChannelTimeRef.current = baseChannelTime\r\n\r\n    //charge states\r\n    const chargesRef = useRef(charges || 1)\r\n\r\n    chargesRef.current = state.charges\r\n\r\n    //gcd states\r\n    const globalCooldownRef = useRef(globalCooldown)\r\n    const globalCooldownStartTimeRef = useRef(globalCooldownStartTime)\r\n\r\n    globalCooldownRef.current = globalCooldown\r\n    globalCooldownStartTimeRef.current = globalCooldownStartTime\r\n\r\n    const ability = useRef()\r\n\r\n    useEffect(() => {\r\n        const triggers = [{\r\n            eventTypes: [\"CAST\"],\r\n            trigger: onAbilityUpdate \r\n        },\r\n        {\r\n            eventTypes: [\"RESOURCE\", \"AURA\", \"STAT\"],\r\n            trigger: triggerEvent\r\n        }]\r\n\r\n        const initialState = {\r\n            name,\r\n            displayName,\r\n            resource,\r\n            unusable,\r\n            cooldown: {\r\n                duration: cooldownRef,\r\n                startTime: startTimeRef\r\n            },\r\n            cast: {\r\n                duration: casttimeRef,\r\n                startTime: castStartTimeRef,\r\n                endTime: castEndTimeRef,\r\n                casting: castingRef\r\n            },\r\n            channel: {\r\n                baseDuration: baseChannelTimeRef,\r\n                ticks\r\n            },\r\n            charges: {\r\n                maxCharges: charges,\r\n                current: chargesRef\r\n            },\r\n            globalCooldown: {\r\n                duration: globalCooldownRef,\r\n                startTime: globalCooldownStartTimeRef\r\n            }\r\n        }\r\n\r\n        ability.current = Ability.create(type, initialState, setState, onExecute, triggers)\r\n        \r\n        subscribe({\r\n            source: name,\r\n            keybind: key,\r\n            execute: () => ability.current.execute(),\r\n            notify: () => ability.current.beginGlobalCooldown(),\r\n            getRemainingCooldown: () => ability.current.getRemainingCooldown()\r\n        })\r\n\r\n        return () => {\r\n            ability.current.remove()\r\n            unsubscribe(name)\r\n        }\r\n    }, [unusable, key, reset])\r\n\r\n    return (\r\n        <div className=\"progress-ability-container\">\r\n        <div className=\"progress-ability\" onClick={() => {}}>\r\n            <img\r\n                className={!unusable && ((state.charges > 0 && charges) || (!startTimeRef.current)) ? \"colored\" : \"desaturated\"}\r\n                src={icon}\r\n                width={size}\r\n                height={size}\r\n            />\r\n            <div className=\"charge-text\">{charges > 1 ? state.charges : \"\"}</div>\r\n            {startTimeRef.current || globalCooldownRef.current ? \r\n            <CooldownSweep size={size} progress={state.progress}/>\r\n            : null}\r\n        </div>\r\n        <div>{keybindText}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressAbility;","const GlobalCooldown = {\r\n\r\n    start: (duration, triggerEvent) => {\r\n        console.log(\"End time for gcd: \" + (Date.now() + duration))\r\n\r\n        triggerEvent({\r\n            type: \"GLOBAL_COOLDOWN_START\",\r\n            payload: {\r\n                gcd: duration,\r\n                time: Date.now()\r\n\r\n            }\r\n        })\r\n\r\n        setTimeout(() => {\r\n            console.log(\"Gcd ended\")\r\n            triggerEvent({\r\n                type: \"GLOBAL_COOLDOWN_END\"\r\n            })    \r\n        }, duration);\r\n    }\r\n}\r\n\r\nexport default GlobalCooldown","import React, {useState, useEffect, useRef} from 'react';\r\nimport \"./CastBar.css\"\r\n\r\nconst CastBar = (props) => {\r\n\r\n    const {time, name, displayName, duration, direction} = props\r\n\r\n    const sec = 1000\r\n    const interval = 50\r\n\r\n    const [current, setCurrent] = useState(0)\r\n\r\n    const timeRef = useRef(time)\r\n    const durationRef = useRef(time)\r\n\r\n    timeRef.current = time\r\n    durationRef.current = duration\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            let now = Date.now()\r\n            setCurrent(current => now - timeRef.current)\r\n        }, interval)\r\n\r\n        return () => {\r\n            clearInterval(timer)\r\n            setCurrent(current => 0)\r\n        }\r\n    }, [name])\r\n\r\n    return (\r\n        <div className=\"progress-bar-container\">\r\n            <div className=\"cast-bar-text-container\">\r\n                <div className=\"progress-text cast-bar-text\">{displayName}</div>\r\n                <div className=\"progress-text cast-bar-text\">{direction \r\n                ? `${(current/sec).toFixed(1)}/${((duration/sec).toFixed(1))}`\r\n                : `${((durationRef.current-current)/sec).toFixed(1)}/${((durationRef.current/sec).toFixed(1))}`}sec\r\n                </div> \r\n            </div>\r\n            <div className=\"progress-bar cast-bar\" \r\n                style={{\r\n                    width: direction \r\n                    ? `${(current/durationRef.current*100).toFixed(2)}%`\r\n                    : `${((durationRef.current-current)/durationRef.current*100).toFixed(2)}%`\r\n            }}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CastBar","import React, {useState, useEffect, useReducer, useRef} from 'react';\r\nimport ProgressAbility from \"./ProgressAbility\"\r\nimport GlobalCooldown from \"./GlobalCooldown\"\r\nimport CastBar from \"./CastBar\"\r\nimport {spellQueueWindow} from \"../lib/constants\"\r\nimport \"./AbilityBar.css\"\r\n\r\nconst AbilityBar = (props) => {\r\n\r\n    const gcdLength = 1500\r\n    const {abilitySettings, abilities, haste, inVoidform, triggerEvent, keyEventsPaused, reset} = props\r\n\r\n    const hasteRef = useRef(haste)\r\n    hasteRef.current = haste\r\n\r\n    const inVoidformRef = useRef(inVoidform)\r\n    inVoidformRef.current = inVoidform \r\n\r\n    const spellQueueTimer = useRef()\r\n\r\n    const defaultCooldowns = () => {\r\n        const cooldowns = {}\r\n        Object.keys(abilities).forEach(k => {\r\n            if(abilitySettings[k] && abilitySettings[k].disabled) return\r\n            cooldowns[k] = {\r\n                startTime: 0\r\n            }\r\n        })\r\n\r\n        return cooldowns\r\n    }\r\n\r\n    const [observers, setObservers] = useState([])\r\n    const [voidformEntered, setVoidformEntered] = useState(false)\r\n\r\n    const observersRef = useRef(observers)\r\n    observersRef.current = observers\r\n\r\n    const defaultState = {\r\n        globalCooldown: 0,\r\n        cooldowns: defaultCooldowns(),\r\n        status: {}\r\n    }\r\n\r\n    useEffect(() => {\r\n        triggerCooldown({\r\n            type: \"RESET\"\r\n        })\r\n    }, [reset])\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keypress\", handleKeyPress)\r\n\r\n        return () => {\r\n            document.removeEventListener(\"keypress\", handleKeyPress)\r\n        }\r\n    }, [keyEventsPaused])\r\n\r\n    const [state, triggerCooldown] = useReducer((oldState, action) => {\r\n        const newState = JSON.parse(JSON.stringify(oldState))\r\n        const payload = action.payload\r\n\r\n        switch(action.type) {\r\n            case \"RESET\":\r\n                return defaultState\r\n            case \"EXECUTE_PENDING\":\r\n                var {name} = payload\r\n                newState.status[name] = \"PENDING\"\r\n                break\r\n            case \"EXECUTE_END\":\r\n                var {name} = payload\r\n                newState.status[name] = \"\"\r\n                break\r\n            case \"ABILITY_CAST_SUCCESS\":\r\n                var {name} = payload\r\n                if(abilitySettings[\"void-bolt\"].rankTwo && newState.casting && name === \"void-bolt\" && newState.casting.name === \"mind-flay\") {\r\n                    break\r\n                }\r\n                newState.cooldowns[name].castStartTime = 0\r\n                newState.cooldowns[name].castEndTime = 0\r\n\r\n                if(newState.casting) {\r\n                    newState.cooldowns[newState.casting.name].castStartTime = 0\r\n                    newState.cooldowns[newState.casting.name].castEndTime = 0\r\n                    delete newState.casting\r\n                }\r\n                break\r\n            case \"ABILITY_COOLDOWN_START\":\r\n                var {name, time} = payload\r\n                newState.cooldowns[name].startTime = time\r\n                break\r\n            case \"ABILITY_COOLDOWN_END\":\r\n                var {name} = payload\r\n                newState.cooldowns[name].startTime = 0\r\n                break\r\n            case \"ABILITY_CAST_START\":\r\n                var {name, displayName, time, duration} = payload\r\n                newState.cooldowns[name].castStartTime = time\r\n                newState.cooldowns[name].castEndTime = time + duration\r\n                if(newState.casting) {\r\n                    newState.cooldowns[newState.casting.name].castStartTime = 0\r\n                    newState.cooldowns[newState.casting.name].castEndTime = 0\r\n                }\r\n                newState.casting = {\r\n                    duration,\r\n                    name,\r\n                    displayName,\r\n                    direction: 1,\r\n                    time\r\n                }\r\n                break\r\n            case \"ABILITY_CHANNEL_START\":\r\n                var {name, displayName, time, duration, baseChannelTime} = payload\r\n                newState.cooldowns[name].castStartTime = time\r\n                newState.cooldowns[name].castEndTime = time + duration\r\n                newState.cooldowns[name].baseChannelTime = baseChannelTime\r\n                if(newState.casting && name !== newState.casting.name) {\r\n                    newState.cooldowns[newState.casting.name].castStartTime = 0\r\n                    newState.cooldowns[newState.casting.name].castEndTime = 0\r\n                }\r\n                newState.casting = {\r\n                    duration,\r\n                    name,\r\n                    displayName,\r\n                    direction: 0,\r\n                    time\r\n                }\r\n                break\r\n            case \"ABILITY_CHANNEL_UPDATE\":\r\n                var {name} = payload\r\n                newState.cooldowns[name].ticks--\r\n                break\r\n            case \"ABILITY_CHANNEL_END\":\r\n                var {name} = payload\r\n                newState.cooldowns[name].castStartTime = 0\r\n                newState.cooldowns[name].castEndTime = 0\r\n                newState.cooldowns[name].ticks = 0\r\n                if(newState.casting && name === newState.casting.name) delete newState.casting\r\n                break\r\n            case \"GLOBAL_COOLDOWN_START\":\r\n                console.log(\"Starting gcd...\")\r\n                newState.globalCooldown = payload.gcd\r\n                newState.globalCooldownStartTime = payload.time\r\n                break\r\n            case \"GLOBAL_COOLDOWN_END\":\r\n                console.log(\"Ending gcd...\")\r\n                newState.globalCooldown = 0\r\n                newState.globalCooldownStartTime = 0\r\n                break\r\n            default:\r\n                console.error(`Invalid action provided: ${action.type}`)\r\n        }\r\n\r\n        return newState\r\n\r\n    }, defaultState)\r\n\r\n    const globalCooldownRef = useRef(state.globalCooldown)\r\n    globalCooldownRef.current = state.globalCooldown\r\n\r\n    const globalCooldownStartTimeRef = useRef(state.globalCooldownStartTime)\r\n    globalCooldownStartTimeRef.current = state.globalCooldownStartTime\r\n\r\n    const handleKeyPress = (e) => {\r\n        if(keyEventsPaused) return\r\n        \r\n        const now = Date.now()\r\n\r\n        observersRef.current.forEach(o => {\r\n            if(o.keybind === e.key) {\r\n                const abilityCooldownRemaining = o.getRemainingCooldown()\r\n                const globalCooldownRemaining = globalCooldownRef.current ? globalCooldownRef.current - (now - globalCooldownStartTimeRef.current) : 0\r\n                const remaining = Math.max(abilityCooldownRemaining, globalCooldownRemaining)\r\n\r\n                if(remaining > spellQueueWindow) return\r\n\r\n                queueAbility(o.source, o.execute, remaining + 15)\r\n            }\r\n        })\r\n    }\r\n\r\n    const calculateCooldown = (cooldown) => {\r\n        return cooldown/hasteRef.current\r\n    }\r\n\r\n    const triggerGlobalCooldown = () => {\r\n        let gcd = Math.max(calculateCooldown(gcdLength), gcdLength/2)\r\n\r\n        GlobalCooldown.start(gcd, triggerCooldown)\r\n\r\n        setTimeout(() => {\r\n            observersRef.current.forEach(o => o.notify())\r\n        }, 0)\r\n    }\r\n\r\n    const subscribe = (observer) => {\r\n        setObservers(o => [...o, observer])\r\n    }\r\n\r\n    const unsubscribe = (source) => {\r\n        setObservers(obs => obs.filter(o => o.source !== source))\r\n    }\r\n\r\n    const getAbilityCooldown = (k) => {\r\n        const ability = abilitySettings[k]\r\n        let cooldown = ability.cooldown\r\n\r\n        if(inVoidformRef.current && k === \"mind-blast\") {\r\n            let cdr = ability.cdr \r\n            if(!voidformEntered) {\r\n                setVoidformEntered(true)\r\n                const now = Date.now()\r\n                const startTime = state.cooldowns[k].startTime\r\n                const remaining = startTime ? now - startTime : cooldown\r\n                cdr *= remaining/cooldown\r\n            }\r\n            cooldown -= cdr\r\n        }\r\n\r\n        if(!inVoidformRef.current && voidformEntered)\r\n            setVoidformEntered(false)\r\n\r\n        return ability.hasted ? calculateCooldown(cooldown) : cooldown\r\n    }\r\n\r\n    const queueAbility = (name, execute, remaining) => {\r\n\r\n        clearTimeout(spellQueueTimer.current)\r\n\r\n        spellQueueTimer.current = setTimeout(execute, remaining)\r\n    }\r\n\r\n    return (\r\n        <div className=\"ability-bar-container\">\r\n        {state.casting ? <CastBar {...state.casting}/> : null}\r\n        <div className=\"ability-bar\">\r\n            {Object.keys(abilities)\r\n            .map((k,i) => {\r\n                if(abilities[k].disabled) return\r\n                if(k === \"void-bolt\" && !inVoidformRef.current) return\r\n                if(k === \"void-eruption\" && inVoidformRef.current) return\r\n                return <ProgressAbility\r\n                    name={k}\r\n                    key={i}\r\n                    {...abilities[k]}\r\n                    {...state.cooldowns[k]}\r\n                    settings={abilitySettings[k]}\r\n                    cooldown={getAbilityCooldown(k)}\r\n                    globalCooldown={state.globalCooldown}\r\n                    globalCooldownStartTime={state.globalCooldownStartTime}\r\n                    casttime={calculateCooldown(abilitySettings[k].casttime)}\r\n                    casting={state.casting && state.casting.time && state.casting.direction}\r\n                    subscribe={subscribe}\r\n                    unsubscribe={unsubscribe}\r\n                    onExecute={triggerGlobalCooldown}\r\n                    onAbilityUpdate={triggerCooldown}\r\n                    triggerEvent={triggerEvent}\r\n                    reset={reset}\r\n                />\r\n            })}\r\n            </div>        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AbilityBar","import React, {useState, useEffect, useReducer, useRef} from 'react';\r\nimport CooldownSweep from \"../CooldownSweep\"\r\nimport \"./Aura.css\"\r\n\r\nconst Aura = (props) => {\r\n\r\n    const {icon, displayName, duration, maxDuration, stacks} = props\r\n\r\n    const size = 30\r\n    const progress = duration && ((maxDuration-duration)/maxDuration)\r\n\r\n    return (\r\n        <div className=\"aura\">\r\n            <img\r\n                src={icon}\r\n                width={size}\r\n                height={size}\r\n            >\r\n            </img>\r\n            <div className=\"aura-text\">{stacks > 0 ? stacks : \"\"}</div>\r\n            {duration ? <CooldownSweep size={30} progress={progress} inverse={true}/> : null}\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Aura","import React, {useState, useEffect, useReducer, useRef} from 'react';\r\nimport Aura from \"./Aura\"\r\n\r\nconst LingeringInsanity = (props) => {\r\n\r\n    const { type, startTime, haste, stacks, inVoidform, triggerEvent, ...settings} = props\r\n\r\n    const interval = 100\r\n    const name = \"lingeringInsanity\"\r\n    const displayName = \"Lingering Insanity\"\r\n    const icon = \"images/lingering-insanity.jpg\"\r\n    const defaultMaxDuration = 60000\r\n\r\n    const [maxDuration, setMaxDuration] = useState(defaultMaxDuration)\r\n    const [duration, setDuration] = useState(0)\r\n\r\n    const stacksRef = useRef(stacks)\r\n    stacksRef.current = stacks\r\n\r\n    const inVoidformRef = useRef(inVoidform)\r\n    inVoidformRef.current = inVoidform\r\n\r\n    const startTimeRef = useRef(startTime)\r\n    startTimeRef.current = startTime\r\n\r\n    const hasteRef = useRef(haste)\r\n    hasteRef.current = haste\r\n\r\n    const initialize = (afterVoidformEntry, hasteRetention, stacks, duration) => {\r\n        let currentMaxDuration = afterVoidformEntry ? defaultMaxDuration : duration\r\n        let voidformEntered = false\r\n\r\n        setMaxDuration(maxDuration => currentMaxDuration)\r\n\r\n        triggerEvent({\r\n            type: \"LINGERING_INSANITY_START\",\r\n            payload: {\r\n                haste: hasteRef.current * hasteRetention,\r\n                stacks\r\n            }\r\n        })\r\n\r\n        return {\r\n            currentMaxDuration,\r\n            voidformEntered\r\n        }\r\n\r\n    }\r\n\r\n    const startStatic = () => {\r\n\r\n        const { duration, afterVoidformEntry, hasteRetention } = settings\r\n        \r\n        let state = initialize(afterVoidformEntry, hasteRetention, stacksRef.current, duration)\r\n\r\n        const timer = setInterval(() => {\r\n\r\n            const now = Date.now()\r\n\r\n            console.log(\"here\")\r\n\r\n            //just left voidform\r\n            if(state.voidformEntered && !inVoidformRef.current) {\r\n                state = initialize(afterVoidformEntry, hasteRetention, stacksRef.current, duration)\r\n\r\n                return\r\n            }\r\n\r\n            //timed out\r\n            if(now >= startTimeRef.current + state.currentMaxDuration) {\r\n                clearInterval(timer)\r\n                triggerEvent({\r\n                    type: \"LINGERING_INSANITY_END\"\r\n                })\r\n\r\n                return\r\n            }\r\n\r\n            if(!state.voidformEntered && inVoidformRef.current) \r\n            {\r\n                state.voidformEntered = true\r\n\r\n                if(afterVoidformEntry) {\r\n                    triggerEvent({\r\n                        type: \"AURA_REFRESH\",\r\n                        payload: {\r\n                            name,\r\n                            time: now\r\n                        }\r\n                    })\r\n                    setMaxDuration(maxDuration => duration)\r\n                    state.currentMaxDuration = duration\r\n                    setDuration(duration => 0)\r\n                    return\r\n                }\r\n           }            \r\n\r\n            setDuration(duration => now - startTimeRef.current)\r\n\r\n        }, interval)\r\n\r\n        return timer\r\n    }\r\n\r\n    const calculateDecayStacks = (voidformHaste, hasteDecay) => {\r\n        return Math.ceil(voidformHaste/hasteDecay)\r\n    }\r\n\r\n    const startDecay = () => {\r\n\r\n        const { decayRate, hasteDecay } = settings\r\n\r\n        let i = 0\r\n\r\n        let state = initialize(true, 1, calculateDecayStacks(hasteRef.current, hasteDecay))\r\n\r\n        const timer = setInterval(() => {\r\n\r\n            i += interval\r\n\r\n            const now = Date.now()\r\n\r\n            if(state.voidformEntered && !inVoidformRef.current) {\r\n                state = initialize(true, 1, calculateDecayStacks(hasteRef.current, hasteDecay))\r\n                i = 0\r\n\r\n                return\r\n            }\r\n\r\n            if(stacksRef.current <= 0) {\r\n                clearInterval(timer)\r\n                triggerEvent({\r\n                    type: \"LINGERING_INSANITY_END\"\r\n                })\r\n\r\n                return\r\n            }\r\n\r\n            //lose stack\r\n            if(i % decayRate === 0) {\r\n                triggerEvent({\r\n                    type: \"LINGERING_INSANITY_UPDATE\",\r\n                    payload: hasteDecay * -1\r\n                })\r\n            }\r\n\r\n            if(!state.voidformEntered && inVoidformRef.current) state.voidformEntered = true\r\n\r\n            setDuration(duration => now - startTimeRef.current)\r\n\r\n        }, interval)\r\n\r\n        return timer\r\n    }\r\n\r\n    useEffect(() => {\r\n        let timer\r\n\r\n        switch(type) {\r\n            case \"static\":\r\n                timer = startStatic()\r\n                break\r\n            case \"decay\":\r\n                timer = startDecay()\r\n                break\r\n        }\r\n\r\n        return () => clearInterval(timer)\r\n\r\n    }, [])\r\n\r\n    return <Aura icon={icon} displayName={displayName} duration={duration} maxDuration={maxDuration} stacks={stacks}/>\r\n}\r\n\r\nexport default LingeringInsanity","import React, { useState, useEffect, useRef } from 'react';\r\nimport Aura from \"./Aura\"\r\n\r\nconst Voidform = (props) => {\r\n\r\n    const { drainRate, drainStart, hasteStack, hasteStart, maxStacks, paused, active, triggerEvent } = props\r\n    const interval = 100\r\n    const displayName = \"Voidform\"\r\n    const icon = \"images/voidform.jpg\"\r\n\r\n    const [stacks, setStacks] = useState(1)\r\n\r\n    const pausedRef = useRef(paused)\r\n    pausedRef.current = paused\r\n\r\n    const start = () => {\r\n        let n = 0\r\n        let frequency = Math.round(1000 / interval)\r\n\r\n        let i = 0\r\n\r\n        triggerEvent({\r\n            type: \"HASTE_UPDATE\",\r\n            payload: {\r\n                source: \"voidform\",\r\n                haste: hasteStart + hasteStack\r\n            }\r\n        })\r\n\r\n        const timer = setInterval(() => {\r\n\r\n            let sec = interval / 1000\r\n            let drain = (drainStart + drainRate * n) * sec\r\n\r\n            n += sec\r\n            i++\r\n\r\n            if (!pausedRef.current)\r\n                triggerEvent({\r\n                    type: \"RESOURCE_UPDATE\",\r\n                    payload: {\r\n                        resource: drain * -1\r\n                    }\r\n                })\r\n\r\n            if (i % frequency === 0 && (!maxStacks || i / frequency < maxStacks)) {\r\n                //gain a stack of vf\r\n                triggerEvent({\r\n                    type: \"VOIDFORM_UPDATE\",\r\n                    payload: hasteStack\r\n                })\r\n                setStacks(stacks => stacks + 1)\r\n            }\r\n\r\n        }, interval)\r\n\r\n        return timer\r\n    }\r\n\r\n    useEffect(() => {\r\n        let timer = start()\r\n\r\n        return () => {\r\n            clearInterval(timer)\r\n\r\n            triggerEvent({\r\n                type: \"VOIDFORM_END\",\r\n                payload: {\r\n                    time: Date.now(),\r\n                    startingHaste: hasteStart\r\n                }\r\n            })\r\n        }\r\n    }, [active])\r\n\r\n    return <Aura icon={icon} displayName={displayName} stacks={stacks} />\r\n}\r\n\r\nexport default Voidform","import React, {useState, useEffect, useReducer, useRef} from 'react';\r\nimport Aura from \"./Aura\"\r\n\r\nconst DamageOverTime = (props) => {\r\n\r\n    const {icon, name, displayName, startTime, baseDuration, maxDuration, ticks, resource, haste, triggerEvent} = props\r\n\r\n    const interval = 100\r\n\r\n    const [duration, setDuration] = useState(0)\r\n\r\n    const startTimeRef = useRef(startTime)\r\n    startTimeRef.current = startTime\r\n\r\n    const maxDurationRef = useRef(maxDuration)\r\n    maxDurationRef.current = maxDuration\r\n\r\n    const hasteRef = useRef(haste)\r\n    hasteRef.current = haste\r\n\r\n    const calculateNextTickTime = (now) => {\r\n        //console.log(\"Haste: \" + hasteRef.current)\r\n        return (baseDuration/ticks)/hasteRef.current + now\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(\"Inside use effect for: \" + name)\r\n        // console.log(\"Resource: \" + resource)\r\n        // console.log(\"Haste: \" + haste)\r\n        let start = Date.now()\r\n        let tickTime = calculateNextTickTime(start)\r\n\r\n        triggerEvent({\r\n            type: \"AURA_BEGIN\",\r\n            payload: {\r\n                name,\r\n                duration: baseDuration,\r\n                time: start\r\n            }\r\n        })\r\n\r\n        const timer = setInterval(() => {\r\n\r\n            const now = Date.now()\r\n\r\n            if(now >= startTimeRef.current + maxDurationRef.current) {\r\n                clearInterval(timer)\r\n                triggerEvent({\r\n                    type: \"RESOURCE_UPDATE\",\r\n                    payload: {\r\n                        resource\r\n                    }\r\n                })\r\n                triggerEvent({\r\n                    type: \"AURA_END\",\r\n                    payload: {\r\n                        name\r\n                    }\r\n                })\r\n                return\r\n            }\r\n\r\n            if(now >= tickTime) {\r\n                //console.log(\"Tick!\")\r\n                triggerEvent({\r\n                    type: \"RESOURCE_UPDATE\",\r\n                    payload: {\r\n                        resource\r\n                    }\r\n                })\r\n\r\n                tickTime = calculateNextTickTime(now)\r\n            }\r\n\r\n            setDuration(duration => now - startTimeRef.current)\r\n\r\n        }, interval)\r\n\r\n        return () => clearInterval(timer)\r\n    }, [])\r\n\r\n    return <Aura icon={icon} displayName={displayName} duration={duration} maxDuration={maxDurationRef.current}/>\r\n}\r\n\r\nexport default DamageOverTime","const whatIs = {\r\n    cooldown: \"The amount of time, in seconds, it takes for an ability to be able to be recast.\",\r\n    charges: \"The number of times an ability may be cast while it is on cooldown.\",\r\n    hasted: \"An ability that is hasted has its cooldown reduced by haste.\",\r\n    resourceCast: \"The amount of resource an ability will generate upon a successful cast.\",\r\n    resourceChannel: \"The amount of resource an ability will generate over its complete channel period.\",\r\n    resourceAura: \"The amount of resource an aura will generate every time its effect triggers.\",\r\n    castTime: \"The amount of time, in seconds, it takes for an ability to be executed.\",\r\n    channelTime: \"The amount of time, in seconds, it takes for an ability's channel to complete.\",\r\n    ticks: \"The number of times a channel generates resources over its duration.\",\r\n    voidBoltRankTwo: \"An extra rank coming to Void Bolt in Shadowlands. It allows Void Bolt to be cast during Mind Flay, without canceling it.\",\r\n    voidBoltExtension: \"The amount of time, in seconds, that Shadow Word: Pain and Vampiric Touch are extended when Void Bolt is cast.\",\r\n    voidformThreshold: \"The amount of Insanity that is required to cast Void Eruption out of Voidform.\",\r\n    voidformCooldownReduction: \"The amount of time, in seconds, that Mind Blast's cooldown is reduced while in Voidform.\",\r\n    haste: \"Increases the rate at which spells cast and the global cooldown, and certain spell cooldowns, regenerate.\",\r\n    voidformStartingDrain: \"The starting amount of Insanity being drained every second while in Voidform.\",\r\n    voidformDrainRate: \"The amount of increasing Insanity drained every second while in Voidform.\",\r\n    voidformStartingHaste: \"The amount of haste, in percent, that is granted at the start of Voidform.\",\r\n    voidformHasteStack: \"The amount of haste, in percent, that every stack of Voidform grants.\",\r\n    voidformMaximumStacks: \"The maximum number of Voidform stacks. Note that reaching the maximum does not stop drain from increasing.\",\r\n    lingeringInsanityType: \"Lingering Insanity has two types.\\nStatic - The length of the aura and haste from stacks are constant.\\nDecay - Haste stacks are lost over the aura's duration at a certain rate.\",\r\n    lingeringInsanityDuration: \"An option for type 'Static'. This is the amount of time, in seconds, that the aura will last.\",\r\n    lingeringInsanityAfterVoidformEntry: \"An option for type 'Static'. If enabled, then the duration for Lingering Insanity will only start after entering Voidform.\",\r\n    lingeringInsanityHasteRetention: \"An option for type 'Static. The amount of haste, in percent, that is retained from the final stacks of the previous Voidform.\",\r\n    lingeringInsanityDecayRate: \"An option for type 'Decay'. The amount of time, in seconds it takes for one stack of the aura to be lost.\",\r\n    lingeringInsanityHasteDecay: \"An option for type 'Decay'. The amount of haste, in percent, that is removed every time the aura loses a stack.\",\r\n    auraDuration: \"The amount of time, in seconds, that an aura's effect will last.\",\r\n    auraTicks: \"The number of times an aura will trigger its effect over its duration.\"\r\n}\r\n\r\nconst commonOptions = {\r\n    cooldown: {\r\n        key: \"cooldown\",\r\n        displayName: \"Cooldown\",\r\n        type: \"time\",\r\n        whatIs: whatIs.cooldown,\r\n        unit: \"sec\"\r\n    },\r\n    charges: {\r\n        key: \"charges\",\r\n        displayName: \"Charges\",\r\n        type: \"number\",\r\n        whatIs: whatIs.charges\r\n    },\r\n    hasted: {\r\n        key: \"hasted\",\r\n        displayName: \"Hasted\",\r\n        type: \"boolean\",\r\n        whatIs: whatIs.hasted\r\n    },\r\n    resourceCast: {\r\n        key: \"resource\",\r\n        displayName: \"Resource\",\r\n        type: \"number\",\r\n        whatIs: whatIs.resourceCast,\r\n        unit: \"insanity\"\r\n    },\r\n    resourceChannel: {\r\n        key: \"resource\",\r\n        displayName: \"Resource\",\r\n        type: \"number\",\r\n        whatIs: whatIs.resourceChannel,\r\n        unit: \"insanity\"\r\n    },\r\n    castTime: {\r\n        key: \"casttime\",\r\n        displayName: \"Cast Time\",\r\n        type: \"time\",\r\n        whatIs: whatIs.castTime,\r\n        unit: \"sec\"\r\n    },\r\n    channelTime: {\r\n        key: \"casttime\",\r\n        displayName: \"Channel Time\",\r\n        type: \"time\",\r\n        whatIs: whatIs.channelTime,\r\n        unit: \"sec\"\r\n    },\r\n    ticks: {\r\n        key: \"ticks\",\r\n        displayName: \"Ticks\",\r\n        type: \"number\",\r\n        whatIs: whatIs.ticks\r\n    },\r\n    auraDuration: {\r\n        key: \"baseDuration\",\r\n        displayName: \"Duration\",\r\n        type: \"time\",\r\n        whatIs: whatIs.auraDuration\r\n    },\r\n    auraTicks: {\r\n        key: \"ticks\",\r\n        displayName: \"Ticks\",\r\n        type: \"number\",\r\n        whatIs: whatIs.auraTicks\r\n    },\r\n    auraResource: {\r\n        key: \"resource\",\r\n        displayName: \"Resource\",\r\n        type: \"number\",\r\n        whatIs: whatIs.resourceAura\r\n    }\r\n}\r\n\r\n\r\nexport const abilityOptions = {\r\n    \"void-bolt\": [\r\n        commonOptions.cooldown,\r\n        commonOptions.hasted,\r\n        commonOptions.charges,\r\n        commonOptions.resourceCast,\r\n        {\r\n            key: \"rankTwo\",\r\n            displayName: \"Rank 2\",\r\n            type: \"boolean\",\r\n            whatIs: whatIs.voidBoltRankTwo\r\n        },\r\n        {\r\n            key: \"extension\",\r\n            displayName: \"DoT Extension\",\r\n            type: \"time\",\r\n            whatIs: whatIs.voidBoltExtension\r\n        }\r\n    ],\r\n    \"void-eruption\": [\r\n        commonOptions.castTime,\r\n        {\r\n            key: \"threshold\",\r\n            displayName: \"Insanity Threshold\",\r\n            type: \"number\",\r\n            whatIs: whatIs.voidformThreshold\r\n        }\r\n    ],\r\n    \"mind-flay\": [\r\n        commonOptions.channelTime,\r\n        commonOptions.resourceChannel,\r\n        commonOptions.ticks\r\n    ],\r\n    \"mind-blast\": [\r\n        commonOptions.cooldown,\r\n        commonOptions.charges,\r\n        commonOptions.castTime,\r\n        commonOptions.hasted,\r\n        commonOptions.resourceCast,\r\n        {\r\n            key: \"cdr\",\r\n            displayName: \"Voidform Cooldown Reduction\",\r\n            type: \"time\",\r\n            whatIs: whatIs.voidformCooldownReduction\r\n        }\r\n    ],\r\n    \"shadow-word-death\": [\r\n        commonOptions.cooldown,\r\n        commonOptions.charges,\r\n        commonOptions.hasted,\r\n        commonOptions.resourceCast\r\n    ],\r\n    \"void-torrent\": [\r\n        commonOptions.cooldown,\r\n        commonOptions.channelTime,\r\n        commonOptions.resourceChannel,\r\n        commonOptions.ticks\r\n    ],\r\n    \"shadow-word-pain\": [\r\n        commonOptions.resourceCast\r\n    ],\r\n    \"vampiric-touch\": [\r\n        commonOptions.castTime,\r\n        commonOptions.resourceCast\r\n    ]\r\n}\r\n\r\nexport const auraOptions = {\r\n    \"stats\": [\r\n        {\r\n            key: \"haste\",\r\n            displayName: \"Haste\",\r\n            type: \"percent\",\r\n            whatIs: whatIs.haste\r\n        }\r\n    ],\r\n    \"voidform\": [\r\n        {\r\n            key: \"drainStart\",\r\n            displayName: \"Starting Insanity Drain\",\r\n            type: \"float\",\r\n            unit: \"/sec\",\r\n            whatIs: whatIs.voidformStartingDrain,\r\n        },\r\n        {\r\n            key: \"drainRate\",\r\n            displayName: \"Insanity Drain Rate\",\r\n            type: \"float\",\r\n            unit: \"/sec\",\r\n            whatIs: whatIs.voidformDrainRate\r\n        },\r\n        {\r\n            key: \"hasteStart\",\r\n            displayName: \"Voidform Starting Haste\",\r\n            type: \"percent\",\r\n            whatIs: whatIs.voidformStartingHaste\r\n        },\r\n        {\r\n            key: \"hasteStack\",\r\n            displayName: \"Voidform Haste Per Stack\",\r\n            type: \"percent\",\r\n            whatIs: whatIs.voidformHasteStack\r\n        },\r\n        {\r\n            key: \"maxStacks\",\r\n            displayName: \"Maximum Voidform Stacks\",\r\n            type: \"number\",\r\n            whatIs: whatIs.voidformMaximumStacks\r\n        }\r\n    ],\r\n    \"lingeringInsanity\": [\r\n        {\r\n            key: \"type\",\r\n            displayName: \"Aura Type\",\r\n            type: \"select\",\r\n            options: [{\r\n                value: \"static\",\r\n                displayName: \"Static\"\r\n            },{\r\n                value: \"decay\",\r\n                displayName: \"Decay\"\r\n            }],\r\n            whatIs: whatIs.lingeringInsanityType\r\n        },\r\n        {\r\n            key: \"duration\",\r\n            displayName: \"Aura Duration\",\r\n            type: \"time\",\r\n            whatIs: whatIs.lingeringInsanityDuration\r\n        },\r\n        {\r\n            key: \"afterVoidformEntry\",\r\n            displayName: \"After Voidform Entry\",\r\n            type: \"boolean\",\r\n            whatIs: whatIs.lingeringInsanityAfterVoidformEntry\r\n        },\r\n        {\r\n            key: \"hasteRetention\",\r\n            displayName: \"Haste Retained\",\r\n            type: \"percent\",\r\n            whatIs: whatIs.lingeringInsanityHasteRetention\r\n        },\r\n        {\r\n            key: \"decayRate\",\r\n            displayName: \"Stack Decay Rate\",\r\n            type: \"time\",\r\n            whatIs: whatIs.lingeringInsanityDecayRate\r\n        },\r\n        {\r\n            key: \"hasteDecay\",\r\n            displayName: \"Haste Decay Amount\",\r\n            type: \"percent\",\r\n            whatIs: whatIs.lingeringInsanityHasteDecay\r\n        }\r\n    ],\r\n    \"shadow-word-pain\": [\r\n        commonOptions.auraDuration,\r\n        commonOptions.auraTicks,\r\n        commonOptions.auraResource\r\n    ],\r\n    \"vampiric-touch\": [\r\n        commonOptions.auraDuration,\r\n        commonOptions.auraTicks,\r\n        commonOptions.auraResource\r\n    ]\r\n}","import React, {useState, useEffect, useReducer, useRef} from 'react';\r\nimport LingeringInsanity from \"./LingeringInsanity\"\r\nimport Voidform from \"./Voidform\"\r\nimport DamageOverTime from './DamageOverTime';\r\nimport { auraOptions } from '../../lib/options';\r\n\r\nconst AuraBar = (props) => {\r\n\r\n    const {auras, triggerEvent, settings, haste} = props\r\n    const {lingeringInsanity, voidform} = settings \r\n    \r\n    //TODO: Move to lib\r\n    const swpIcon = \"images/shadow-word-pain.jpg\"\r\n    const vtIcon = \"images/vampiric-touch.jpg\"\r\n\r\n    const swpName = \"shadow-word-pain\"\r\n    const vtName = \"vampiric-touch\"\r\n\r\n    const swpDisplayName = \"Shadow Word: Pain\"\r\n    const vtDisplayName = \"Vampiric Touch\"\r\n\r\n    const [state, triggerAuraEvent] = useReducer((state, action) => {\r\n\r\n    })\r\n\r\n    return (\r\n        <div className=\"aura-container\">\r\n          {auras.voidform.active \r\n          ? <Voidform \r\n            {...voidform}\r\n            {...auras.voidform}\r\n            triggerEvent={triggerEvent}/> \r\n          : null}\r\n          {auras.lingeringInsanity.active\r\n          ? <LingeringInsanity \r\n            {...lingeringInsanity}\r\n            {...auras.lingeringInsanity} \r\n            inVoidform={auras.voidform.active} \r\n            triggerEvent={triggerEvent}/>\r\n          : null}\r\n          {auras[swpName].active\r\n          ? <DamageOverTime \r\n            icon={swpIcon}\r\n            name={swpName}\r\n            displayName={swpDisplayName}\r\n            {...auras[swpName]}\r\n            {...settings[swpName]}\r\n            haste={haste}\r\n            triggerEvent={triggerEvent}/>\r\n          : null}\r\n          {auras[vtName].active\r\n          ? <DamageOverTime\r\n            icon={vtIcon}\r\n            name={vtName}\r\n            displayName={vtDisplayName}\r\n            {...auras[vtName]}\r\n            {...settings[vtName]}\r\n            haste={haste}\r\n            triggerEvent={triggerEvent}/>\r\n          : null}\r\n        </div>       \r\n    )\r\n}\r\n\r\nexport default AuraBar\r\n\r\n\r\n","import React, {useState, useEffect, useReducer, useRef} from 'react';\r\nimport {useCleanup} from \"../../utils/hooks\"\r\n\r\nimport \"./Panel.css\"\r\n\r\nconst Panel = (props) => {\r\n\r\n    const {panel, currentPanel, reset, onClick, handleClose, header, panelClass, style} = props\r\n\r\n    useCleanup(panel, currentPanel, reset)\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"panel-header hover-pointer\" onClick={() => onClick(panel)}>{header}</div>\r\n            <div className={`panel ${panelClass}`} style={style}>\r\n                <button className=\"panel-button panel-exit-button\" onClick={handleClose}>x</button>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Panel","import {useEffect, useRef} from \"react\"\r\n\r\nexport const useCleanup = (target, value, cleanup) => {\r\n    const ref = useRef()\r\n\r\n    useEffect(() => {\r\n        if(ref.current === target) {\r\n            cleanup()\r\n        }       \r\n        ref.current = value\r\n    }, [value])\r\n}","const defaultAbilitySettings = {\r\n    \"mind-flay\": {\r\n        cooldown: 0,\r\n        resource: 12,\r\n        hasted: true,\r\n        casttime: 3000,\r\n        ticks: 4,\r\n        type: \"channel\",\r\n    },\r\n    \"void-bolt\": {\r\n        cooldown: 4500,\r\n        resource: 20,\r\n        hasted: true,\r\n        rankTwo: false,\r\n        type: \"instant\",\r\n        charges: 1,\r\n        extension: 3000\r\n    },\r\n    \"void-eruption\": {\r\n        cooldown: 0,\r\n        type: \"cast\",\r\n        casttime: 2000,\r\n        threshold: 90\r\n    },\r\n    \"mind-blast\": {\r\n        cooldown: 7500,\r\n        resource: 12,\r\n        hasted: true,\r\n        type: \"cast\",\r\n        casttime: 1500,\r\n        charges: 1,\r\n        cdr: 1500\r\n    },\r\n    \"shadow-word-death\": {\r\n        cooldown: 9000,\r\n        resource: 15,\r\n        type: \"instant\",\r\n        charges: 1,\r\n    },\r\n    \"void-torrent\": {\r\n        cooldown: 45000,\r\n        resource: 30,\r\n        type: \"channel\",\r\n        casttime: 4000,\r\n        ticks: 10,\r\n    },\r\n    \"shadow-word-pain\": {\r\n        cooldown: 0,\r\n        resource: 4,\r\n        type: \"instant\"\r\n    },\r\n    \"vampiric-touch\": {\r\n        cooldown: 0,\r\n        resource: 6,\r\n        type: \"cast\",\r\n        casttime: 1500\r\n    }\r\n}\r\n\r\nexport default defaultAbilitySettings","const defaultAuraSettings = {\r\n    stats: {\r\n        displayName: \"Stats\",\r\n        haste: 0\r\n    },\r\n    voidform: {\r\n        displayName: \"Voidform\",\r\n        drainStart: 6,\r\n        drainRate: .72,\r\n        hasteStart: 0,\r\n        hasteStack: .005,\r\n        maxStacks: 0\r\n    },\r\n    lingeringInsanity: {\r\n        displayName: \"Lingering Insanity\",\r\n        type: \"decay\",\r\n        duration: 60000,\r\n        afterVoidformEntry: false,\r\n        hasteRetention: 1,\r\n        decayRate: 3000,\r\n        hasteDecay: .01\r\n    },\r\n    \"shadow-word-pain\": {\r\n        displayName: \"Shadow Word: Pain\",\r\n        baseDuration: 16000,\r\n        ticks: 8,\r\n        resource: 0\r\n    },\r\n    \"vampiric-touch\": {\r\n        displayName: \"Vampiric Touch\",\r\n        baseDuration: 21000,\r\n        ticks: 7,\r\n        resource: 0\r\n    }\r\n}\r\n\r\nexport default defaultAuraSettings","import {Base64} from \"js-base64\"\r\nimport abilitySettings from \"../lib/abilitySettings\"\r\nimport auraSettings from \"../lib/auraSettings\"\r\n\r\nconst parseAbility = (ability, key) => {\r\n    let abilitySetting = abilitySettings[key]\r\n    let result = Object.keys(abilitySetting).reduce((obj, k) => {\r\n        let userSetting = ability[k]\r\n        //might want to look at options\r\n        let setting = abilitySetting[k]\r\n\r\n        // console.log(key)\r\n        // console.log(k)\r\n\r\n        if(userSetting === null || userSetting === undefined) throw new Error(\"Missing ability setting in input \" + k)\r\n\r\n        // console.log(key)\r\n        // console.log(userSetting)\r\n        // console.log(setting.value)\r\n\r\n        if(typeof userSetting !== typeof setting) throw new Error(\"Ability setting has invalid format\")\r\n        \r\n        obj[k] = userSetting\r\n\r\n        return obj\r\n    }, {})\r\n\r\n    return result\r\n}\r\n\r\nconst parseAbilitySettings = (abilities) => {\r\n    let result = {}\r\n\r\n    console.log(abilities)\r\n\r\n    Object.keys(abilitySettings).forEach(a => {\r\n        let ability = abilities[a]\r\n        //either default or throw\r\n\r\n        if(!ability) throw new Error(\"Missing ability in input\")\r\n\r\n        result[a] = parseAbility(ability, a)\r\n    })\r\n\r\n    return result\r\n}\r\n\r\nconst parseAura = (aura, key) => {\r\n    let auraSetting = auraSettings[key]\r\n\r\n    let result = Object.keys(auraSetting).reduce((obj, k) => {\r\n        let userSetting = aura[k]\r\n        let setting = auraSetting[k]\r\n\r\n        if(userSetting === null || auraSetting === undefined) throw new Error(\"Missing aura setting in input \" + k)\r\n        if(typeof userSetting !== typeof setting) throw new Error(\"Aura setting has invalid format\")\r\n\r\n        obj[k] = userSetting\r\n\r\n        return obj\r\n    }, {})\r\n\r\n    return result\r\n}\r\n\r\nconst parseAuraSettings = (auras) => {\r\n    let result = {}\r\n    Object.keys(auraSettings).forEach(a => {\r\n        let aura = auras[a]\r\n\r\n        if(!aura) throw new Error(\"Missing aura in input\")\r\n\r\n        result[a] = parseAura(aura, a)\r\n    })\r\n\r\n    return result\r\n}\r\n\r\nexport const importSettings = (settings, includeKeybinds) => {\r\n\r\n    try {\r\n        let parsedSettings = JSON.parse(Base64.decode(settings))\r\n\r\n        console.log(parsedSettings)\r\n\r\n        let parsedAbilitySettings = parseAbilitySettings(parsedSettings.abilitySettings)\r\n        let parsedAuraSettings = parseAuraSettings(parsedSettings.auraSettings)\r\n        let abilityConfig = formatAbilityConfig(parsedSettings.abilityConfig, includeKeybinds)\r\n\r\n        return {\r\n            abilitySettings: parsedAbilitySettings, \r\n            auraSettings: parsedAuraSettings,\r\n            abilityConfig\r\n        }\r\n    }\r\n\r\n    catch(e) {\r\n        throw new Error(\"An error occurred while parsing input data.\\nReason: \" + e.message)\r\n    }\r\n}\r\n\r\nconst formatSingleAbilitySetting = (setting) => {\r\n    let result = Object.keys(setting).reduce((obj, k) => {\r\n        obj[k] = setting[k]\r\n        return obj\r\n    }, {})\r\n\r\n    return result\r\n}\r\n\r\nconst formatAbilitySettingsForExport = (settings) => {\r\n    let result = Object.keys(settings).reduce((obj, k) => {\r\n        let ability = settings[k]\r\n        let formattedAbility = formatSingleAbilitySetting(ability)\r\n        obj[k] = formattedAbility\r\n        return obj\r\n    }, {})\r\n\r\n    return result\r\n}\r\n\r\nconst formatAbilityConfig = (settings, includeKeybinds) => {\r\n    let result = Object.keys(settings).reduce((result, k) => {\r\n        let {keybind, disabled} = settings[k]\r\n\r\n        result[k] = {disabled: !!disabled}\r\n        if(includeKeybinds) result[k].keybind = keybind\r\n        \r\n        return result\r\n    }, {})\r\n\r\n    return result\r\n}\r\n\r\nexport const exportSettings = (currentSettings) => {\r\n    let formattedAbilitySettings = formatAbilitySettingsForExport(currentSettings.abilitySettings)\r\n    let formattedAbilityConfig = formatAbilityConfig(currentSettings.abilities, true)\r\n\r\n    let combined =  {\r\n        abilitySettings: formattedAbilitySettings,\r\n        auraSettings: currentSettings.auraSettings,\r\n        abilityConfig: formattedAbilityConfig\r\n    }\r\n\r\n    console.log(combined)\r\n\r\n    let result = Base64.encode(JSON.stringify(combined))\r\n\r\n    return result\r\n}","import React, {useState, useEffect, useReducer, useRef} from 'react';\r\nimport Panel from \"./Panel\"\r\nimport { exportSettings, importSettings } from \"../../utils/importExport\"\r\n\r\nimport \"./Panel.css\"\r\n\r\nconst ExportPanel = (props) => {\r\n\r\n    const {settings, onImport, currentPanel, onClick, closePanel} = props\r\n\r\n    const panel = \"export\"\r\n    const header = \"Import/Export Settings\"\r\n    const panelClass = \"left-panel\"\r\n    const placeholderText = \"Import custom settings here...\"\r\n    const exportTextAreaId = \"export-content\"\r\n    const rows = 20\r\n    const cols = 25\r\n\r\n    const [exportData, setExportData] = useState(\"\")\r\n    const [inputData, setInputData] = useState(\"\")\r\n    const [includeKeybinds, setIncludeKeybinds] = useState(false)\r\n\r\n    const handleImport = () => {\r\n        const settings = importSettings(inputData, includeKeybinds)\r\n        onImport(settings)\r\n        setInputData(\"\")\r\n    }\r\n\r\n    const handleExport = () => {\r\n        const data = exportSettings(settings)\r\n\r\n        setExportData(data)\r\n    }\r\n\r\n    const copyToClipBoard = () => {\r\n        const textArea = document.getElementById(exportTextAreaId)\r\n\r\n        textArea.select()\r\n\r\n        try {\r\n            document.execCommand(\"copy\")\r\n\r\n        }\r\n        catch (err) {\r\n            //set the message\r\n        }\r\n    }\r\n\r\n    const handleInputChange = (e) => {\r\n        let data = e.target.value\r\n\r\n        setInputData(data)\r\n    }\r\n\r\n    const reset = () => {\r\n        setExportData(\"\")\r\n        setInputData(\"\")\r\n        setIncludeKeybinds(false)\r\n    }\r\n\r\n    return (\r\n        <Panel panel={panel} currentPanel={currentPanel} reset={reset} onClick={onClick} handleClose={closePanel} header={header} panelClass={panelClass} style={{transform: `translateX(${currentPanel === panel ? \"0px\": \"-350px\"})`}}>\r\n            <div className=\"vertical-panel-content\">\r\n                <div className=\"panel-content-container\">\r\n                    <div className=\"panel-content-header\">Import Settings</div>\r\n                    <textarea className=\"panel-text-area\" rows={rows} cols={cols} placeholder={placeholderText} value={inputData} onChange={handleInputChange}></textarea>\r\n                    <div className=\"panel-info-text-container\">\r\n                        <label>Include keybinds</label>\r\n                        <input type=\"checkbox\" onChange={() => setIncludeKeybinds(!includeKeybinds)} checked={includeKeybinds} />\r\n                    </div>\r\n                    <div className=\"panel-button-container\">\r\n                        <button className=\"panel-button panel-input-button\" onClick={handleImport} disabled={!inputData}>Import</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"panel-content-container\">\r\n                    <div className=\"panel-content-header\">Export Settings</div>\r\n                    <textarea id={exportTextAreaId} className=\"panel-text-area\" rows={rows} cols={cols} value={exportData} readOnly={true}></textarea>\r\n                    <div className=\"panel-button-container\">\r\n                        <button className=\"panel-button panel-input-button\" onClick={handleExport}>Export</button>\r\n                        <button className=\"panel-button panel-input-button\" onClick={copyToClipBoard} disabled={!exportData}>Copy</button>\r\n                    </div>\r\n                </div>      \r\n            </div> \r\n        </Panel>\r\n    )\r\n}\r\n\r\nexport default ExportPanel","import React, { useState } from \"react\"\r\n\r\nconst TimeTextOption = (props) => {\r\n    const {value, onChange} = props\r\n\r\n    const handleChange = (e) => {\r\n        if(!e.target.value || parseFloat(e.target.value) < 0) return\r\n        onChange(parseFloat(e.target.value)*1000)\r\n    }\r\n    \r\n    return <span><input className=\"setting-option-input\" type=\"number\" value={value/1000} min=\"0\" step=\".1\" onChange={handleChange} />sec</span>\r\n}\r\n\r\nconst NumberTextOption = (props) => {\r\n    const {value, onChange, unit} = props\r\n\r\n    const handleChange = (e) => {\r\n        if(!e.target.value || parseFloat(e.target.value) < 0) return\r\n        onChange(parseInt(e.target.value))\r\n    }\r\n    \r\n    return <span><input className=\"setting-option-input\" type=\"number\" value={value} min=\"0\" onChange={handleChange} /> {unit}</span>\r\n}\r\n\r\nconst FloatTextOption = (props) => {\r\n    const {value, onChange, unit} = props\r\n\r\n    const handleChange = (e) => {\r\n        if(!e.target.value || parseFloat(e.target.value) < 0) return\r\n        onChange(parseFloat(e.target.value))\r\n    }\r\n    \r\n    return <span><input className=\"setting-option-input\" type=\"number\" value={value} min=\"0\" step=\".01\" onChange={handleChange} /> {unit}</span>\r\n}\r\n\r\nconst PercentTextOption = (props) => {\r\n    const {value, onChange} = props\r\n\r\n    const handleChange = (e) => {\r\n        if(!e.target.value || parseFloat(e.target.value) < 0) return\r\n        onChange(parseFloat(e.target.value)/100)\r\n    }\r\n\r\n    return <span><input className=\"setting-option-input\" type=\"number\" value={value*100} min=\"0\" step=\".5\" onChange={handleChange} />%</span>\r\n}\r\n\r\nconst BooleanOption = (props) => {\r\n    const {value, onChange} = props\r\n\r\n    const handleChange = (e) => {\r\n        onChange(e.target.checked)\r\n    }\r\n\r\n    return <input type=\"checkbox\" defaultChecked={value} onChange={handleChange} />\r\n}\r\n\r\nconst SelectOption = (props) => {\r\n    const {value, onChange, name, options} = props\r\n\r\n    const handleChange = (e) => {\r\n        onChange(e.target.value)\r\n    }\r\n\r\n    return (\r\n        options.map(o => (\r\n            <div>\r\n                <input type=\"radio\" id={o.value} name={name} value={o.value} defaultChecked={o.value === value} onChange={handleChange} />\r\n                <label htmlFor={o.value}>{o.displayName}</label>\r\n            </div>\r\n        ))\r\n    )\r\n}\r\n\r\nexport default Option = (type, value, onChange, key, name, rest) => {\r\n    switch(type) {\r\n        case \"time\":\r\n            return <TimeTextOption key={key} value={value} onChange={onChange} />\r\n        case \"number\":\r\n            return <NumberTextOption key={key} value={value} onChange={onChange} {...rest} />\r\n        case \"float\":\r\n            return <FloatTextOption key={key} value={value} onChange={onChange} {...rest} />\r\n        case \"percent\":\r\n            return <PercentTextOption key={key} value={value} onChange={onChange} />\r\n        case \"boolean\":\r\n            return <BooleanOption key={key} value={value} onChange={onChange} />\r\n        case \"select\":\r\n            return <SelectOption key={key} value={value} name={name} onChange={onChange} {...rest} />\r\n        default:\r\n            return null\r\n    }\r\n}","import React from \"react\"\r\nimport Option from \"./optionFactory\"\r\nimport \"./WhatIs.css\"\r\nimport \"./SettingOption.css\"\r\n\r\nconst SettingOption = (props) => {\r\n    const {value, name, type, whatIs, displayName, onChange, onHelp, closeHelp, parentKey, ...rest} = props\r\n\r\n    const handleInputChange = (v) => {\r\n        onChange(name, v)\r\n    }\r\n\r\n    const handleOnHelp = (e) => {\r\n        const pos = {\r\n            x: e.target.offsetLeft,\r\n            y: e.target.offsetTop\r\n        }\r\n        //console.log(e.target.offsetLeft)\r\n        //console.log(e.target.offsetTop)\r\n        onHelp(displayName, whatIs, pos)\r\n    }\r\n\r\n    return (\r\n        <div className=\"setting-option\">\r\n            <div>\r\n                <i className=\"fa fa-question-circle what-is-icon\" onMouseEnter={handleOnHelp} onMouseLeave={closeHelp}></i>\r\n            </div>\r\n            <div className=\"setting-option-header\">{displayName}</div>\r\n            {Option(type, value, handleInputChange, parentKey + \"-input\", name, rest)}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SettingOption","import React from \"react\"\r\nimport \"./WhatIs.css\"\r\n\r\nconst WhatIs = (props) => {\r\n    const {name, text, xPos, yPos} = props\r\n\r\n    //console.log(xPos, yPos)\r\n    const minimumHeight = 30\r\n\r\n    const style = {\r\n        left: `${xPos}px`,\r\n        top: `${yPos+minimumHeight}px`\r\n    }\r\n    \r\n    return (\r\n        <div className=\"what-is\" style={style}>\r\n            <div className=\"what-is-header\">What is... {name}?</div>\r\n            <div className=\"what-is-description\">{text}</div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WhatIs","import React, {useState} from \"react\"\r\nimport SettingOption from \"./SettingOption\"\r\nimport WhatIs from \"./WhatIs\"\r\nimport \"./Panel.css\"\r\n\r\nconst CustomizeSection = (props) => {\r\n\r\n    const {name, setting, options, onChange} = props\r\n\r\n    const [showWhatIs, setShowWhatIs] = useState(false)\r\n    const [whatIs, setWhatIs] = useState({})\r\n\r\n    const handleChange = (optionKey, option) => {\r\n        const newSetting = {...setting, [optionKey]: option}\r\n        onChange(newSetting, name)\r\n    }\r\n\r\n    const handleShowWhatIs = (name, text, pos) => {\r\n        setShowWhatIs(true)\r\n        setWhatIs({\r\n            name,\r\n            text,\r\n            xPos: pos.x,\r\n            yPos: pos.y\r\n        })    \r\n    }\r\n\r\n    const closeWhatIs = () => {\r\n        setShowWhatIs(false)\r\n        setWhatIs({})\r\n    }\r\n\r\n    return (\r\n        <div className=\"customize-section\">\r\n            <div className=\"customoze-section-header\">{setting.displayName}</div>\r\n            {options.map(o => {\r\n            return <SettingOption {...o} key={`${name}-${o.key}`} value={setting[o.key]} name={o.key} parentKey={`${name}-${o.key}`} onChange={handleChange} onHelp={handleShowWhatIs} closeHelp={closeWhatIs}/>\r\n            })}\r\n            {showWhatIs ? <WhatIs {...whatIs}/> : null}\r\n        </div>\r\n            \r\n    )\r\n}\r\n\r\nexport default CustomizeSection","import React, {useState, useEffect, useReducer, useRef} from 'react';\r\nimport Panel from \"./Panel\"\r\nimport CustomizeSection from \"./CustomizeSection\"\r\nimport {abilityOptions, auraOptions} from \"../../lib/options\"\r\nimport \"./Panel.css\"\r\n\r\nconst SettingsPanel = (props) => {\r\n\r\n    const {settings, currentPanel, onAbilitySet, onAuraSet, onClick, closePanel} = props\r\n\r\n    const {abilities, auras} = settings\r\n\r\n    const panel = \"settings\"\r\n    const header= \"Custom Settings\"\r\n    const panelClass = \"right-panel\"\r\n\r\n    const abilityButtonText = \"Update Abilities\"\r\n    const auraButtonText = \"Update Auras\"\r\n\r\n    const changesPendingText =\r\n`Changes pending...\r\nClick the button below to apply your changes`\r\n\r\n    const [currentAbilities, setCurrentAbilities] = useState(abilities)\r\n    const [currentAuras, setCurrentAuras] = useState(auras)\r\n    const [activeAbilitySection, setActiveAbilitySection] = useState(Object.keys(abilities)[0])\r\n    const [activeAuraSection, setActiveAuraSection] = useState(Object.keys(auras)[0])\r\n    const [abilityChangesPending, setAbilityChangesPending] = useState(false)\r\n    const [auraChangesPending, setAuraChangesPending] = useState(false)\r\n\r\n    const handleAbilitySettingChange = (setting, key) => {\r\n        const newAbilities = {...currentAbilities, [key]: setting}\r\n        setCurrentAbilities(newAbilities)\r\n        setAbilityChangesPending(true)\r\n    }\r\n\r\n    const handleAuraSettingChange = (setting, key) => {\r\n        const newAuras = {...currentAuras, [key]: setting}\r\n        setCurrentAuras(newAuras)\r\n        setAuraChangesPending(true)\r\n    }\r\n\r\n    const handleAbilitySet = () => {\r\n        onAbilitySet(currentAbilities)\r\n        setAbilityChangesPending(false)\r\n    }\r\n\r\n    const handleAuraSet = () => {\r\n        onAuraSet(currentAuras)\r\n        setAuraChangesPending(false)\r\n    }\r\n\r\n    const showAbilityOptions = (e) => {\r\n        const settingKey = e.target.getAttribute(\"setting\")\r\n        setActiveAbilitySection(settingKey)\r\n    }\r\n\r\n    const showAuraOptions = (e) => {\r\n        const settingKey = e.target.getAttribute(\"setting\")\r\n        setActiveAuraSection(settingKey)\r\n    }\r\n\r\n    const reset = () => {\r\n        setActiveAbilitySection(Object.keys(abilities)[0])\r\n        setActiveAuraSection(Object.keys(auras)[0])\r\n        setCurrentAuras(auras)\r\n        setCurrentAbilities(abilities)\r\n        setAbilityChangesPending(false)\r\n        setAuraChangesPending(false)\r\n    }\r\n\r\n    return (\r\n        <Panel panel={panel} currentPanel={currentPanel} reset={reset} onClick={onClick} handleClose={closePanel} header={header} panelClass={panelClass} style={{transform: `translateX(${currentPanel === panel ? \"0px\": \"350px\"}`}}>\r\n            <div className=\"vertical-panel-content\">\r\n                <div className=\"panel-content-container\">\r\n                    <div className=\"panel-content-header\">Customize Abilities</div>\r\n                    <div className=\"settings-header-container\">\r\n                        {Object.keys(abilities).map(k => \r\n                            <div key={k} className={activeAbilitySection === k ? \"settings-header-active\" : \"settings-header\"} setting={k} onClick={showAbilityOptions}>{abilities[k].displayName}</div>    \r\n                        )}\r\n                    </div>\r\n                    {activeAbilitySection ? <CustomizeSection name={activeAbilitySection} setting={currentAbilities[activeAbilitySection]} options={abilityOptions[activeAbilitySection]} onChange={handleAbilitySettingChange}/> : null}\r\n                    <div className=\"panel-text-button-container\">\r\n                        <div className=\"panel-info-text-container\">\r\n                            {abilityChangesPending ? changesPendingText : null}\r\n                        </div>                  \r\n                        <div>\r\n                            <button className=\"panel-button\" onClick={handleAbilitySet}>{abilityButtonText}</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"panel-content-container\">\r\n                    <div className=\"panel-content-header\">Customize Auras</div>\r\n                        <div className=\"settings-header-container\">\r\n                            {Object.keys(auras).map(k => \r\n                                <div key={k} className={activeAuraSection === k ? \"settings-header-active\" : \"settings-header\"} setting={k} onClick={showAuraOptions}>{auras[k].displayName}</div>    \r\n                            )}\r\n                        </div>\r\n                        {activeAuraSection ? <CustomizeSection name={activeAuraSection} setting={currentAuras[activeAuraSection]} options={auraOptions[activeAuraSection]} onChange={handleAuraSettingChange}/> : null}\r\n                        <div className=\"panel-text-button-container\">\r\n                            <div className=\"panel-info-text-container\">\r\n                                {auraChangesPending ? changesPendingText : null}    \r\n                            </div>\r\n                            <div>\r\n                                <button className=\"panel-button\" onClick={handleAuraSet}>{auraButtonText}</button>   \r\n                            </div>  \r\n                        </div>            \r\n                </div>\r\n            </div>\r\n        </Panel>      \r\n    )\r\n}\r\n\r\nexport default SettingsPanel","import React, {useState, useEffect, useReducer, useRef} from 'react';\r\nimport Panel from \"./Panel\"\r\nimport {keybinds} from \"../../lib/constants\"\r\nimport \"./Panel.css\"\r\nimport \"./Tooltip.css\"\r\n\r\nconst AbilityKeybindsPanel = (props) => {\r\n\r\n    const {abilities, currentPanel, onKeybind, onToggle, onClick, onPause, closePanel} = props\r\n\r\n    const panel = \"abilitykeybinds\"\r\n    const header = \"Ability and Keybinds\"\r\n    const panelClass = \"bottom-panel\"\r\n\r\n    const defaultState = {\r\n        tooltip: \"\",\r\n        keybindText: \"\",\r\n        currentAbility: \"\"\r\n    }\r\n\r\n    const [tooltip, setTooltip] = useState(defaultState.tooltip)\r\n    const [keybindText, setKeybindText] = useState(defaultState.keybindText)\r\n    const [currentAbility, setCurrentAbility] = useState(defaultState.currentAbility)\r\n\r\n    const handleClose = () => {\r\n        setTooltip(defaultState.tooltip)\r\n        setKeybindText(defaultState.keybindText)\r\n        setCurrentAbility(defaultState.currentAbility)\r\n\r\n        closePanel()\r\n    }\r\n\r\n    const currentAbilityRef = useRef(currentAbility)\r\n    currentAbilityRef.current = currentAbility\r\n\r\n    const showToolTip = (e) => {\r\n        setTooltip(e.target.alt)\r\n    }\r\n\r\n    const hideToolTip = () => {\r\n        setTooltip(\"\")\r\n    }\r\n\r\n    const prepareToBindAbility = (e) => {\r\n        let ability = e.target.getAttribute(\"ability\")\r\n        setCurrentAbility(ability)\r\n\r\n        setKeybindText(`Press any key to bind to ${abilities[ability].displayName}`)\r\n\r\n        document.addEventListener(\"keypress\", bindAbility, {once: true})\r\n    }\r\n\r\n    const bindAbility = (event) => {\r\n        document.removeEventListener(\"keypress\", bindAbility)\r\n        let keybind = {\r\n            key: event.key,\r\n            keybindText: event.key\r\n        }\r\n\r\n        if(keybinds[keybind.key]) keybind.keybindText = keybinds[keybind.key]\r\n        if(keybind.key.match(/[a-z]/)) keybind.keybindText = keybind.key.toUpperCase()\r\n        if(keybind.key.match(/[A-Z]/)) keybind.keybindText = \"S-\" + keybind.key\r\n        \r\n        let ability = currentAbilityRef.current \r\n\r\n        onKeybind(keybind, ability)\r\n        setKeybindText(`${abilities[ability].displayName} successfuly bound to ${keybind.keybindText}`)\r\n    }\r\n\r\n    const reset = () => {\r\n        document.removeEventListener(\"keypress\", bindAbility)\r\n        setTooltip(defaultState.tooltip)\r\n        setKeybindText(defaultState.keybindText)\r\n        setCurrentAbility(defaultState.currentAbility)\r\n    }\r\n\r\n    return (\r\n        <Panel panel={panel} currentPanel={currentPanel} reset={reset} onClick={onClick} header={header} style={{transform: `translateY(${currentPanel === panel ? \"0px\": \"250px\"}`}} panelClass={panelClass} handleClose={handleClose}>\r\n            <div className=\"horizontal-panel-content\">\r\n                <div className=\"panel-content-header\">Change Abilities and Keybinds</div>\r\n                <div className=\"tooltip\">\r\n                    <span className=\"tooltip-text\" visibility={(!!tooltip).toString()}>\r\n                        {tooltip}\r\n                    </span>\r\n                </div>\r\n                <div className=\"panel-abilities-container\">\r\n                    {Object.keys(abilities).map(k => {\r\n                        if(k === \"void-eruption\") return\r\n                        return <div className=\"panel-ability-container\" key={k}>\r\n                            <img  \r\n                                className=\"hover-pointer\" \r\n                                alt={abilities[k].displayName}\r\n                                ability={k} \r\n                                onMouseOver={showToolTip}\r\n                                onMouseOut={hideToolTip}\r\n                                onClick={prepareToBindAbility}\r\n                                src={abilities[k].icon}\r\n                                height={50}\r\n                                width={50}\r\n                            />\r\n                        <button className=\"panel-button\" onClick={() => onToggle(k)}>{abilities[k].disabled ? \"Enable\" : \"Disable\"}</button>\r\n                        </div>\r\n                })}\r\n                </div>\r\n                <div>{keybindText ? keybindText : null}</div>\r\n            </div>\r\n        </Panel>\r\n    )\r\n}\r\n\r\nexport default AbilityKeybindsPanel","import React, {useState, useEffect, useReducer, useRef} from 'react';\r\nimport Panel from \"./Panel\"\r\n\r\nimport \"./Panel.css\"\r\n\r\nconst AboutPanel = (props) => {\r\n    const {currentPanel, onClick, closePanel} = props\r\n\r\n    const panel = \"about\"\r\n    const header= \"About\"\r\n    const panelClass = \"middle-panel\"\r\n\r\n    return (\r\n        <Panel panel={panel} onClick={onClick} handleClose={closePanel} header={header} panelClass={panelClass}\r\n            style={{transform: `translateY(${currentPanel === panel ? \"0px\": \"-685px\"}`}}\r\n        >\r\n            <div className=\"middle-panel-content\">\r\n                <div className=\"panel-content-header\">About</div>\r\n                <div className=\"medium-text left-text panel-text-content\">\r\n                    <p>\r\n                    Voidform Optimizer is a thought experiment I had.\r\n                    </p>\r\n                    <p>\r\n                    I am convinced that many, although not all, players' grievances with Voidform are caused by the\r\n                    implementations of Voidform they have experienced, and not by the design of Voidform itself. Therefore I have made it my mission to allow others\r\n                    to experience Voidform in a myriad of ways; in hope that they realize it isn't inherently flawed, find what they most enjoy about it, and \r\n                    share those findings with others. Then, just maybe, as a community we can come to an agreement on how to <b>#savevoidform</b>.\r\n                    </p>\r\n                    <p>\r\n                    If you have any questions, feedback, or bugs to report, please feel free to DM me on Discord at Shot#1711.\r\n                    </p>\r\n\r\n                </div>\r\n            </div>\r\n        </Panel>      \r\n    )\r\n}\r\n\r\nexport default AboutPanel","const defaultAbilities = {\r\n    \"mind-flay\": {\r\n        displayName: \"Mind Flay\",\r\n        keybind: {\r\n            key: \"1\",\r\n            keybindText: \"1\"\r\n        },\r\n        icon: \"images/mind-flay.jpg\"\r\n    },\r\n    \"mind-blast\": {\r\n        displayName: \"Mind Blast\",\r\n        keybind: {\r\n            key: \"2\",\r\n            keybindText: \"2\"\r\n        },\r\n        icon: \"images/mind-blast.jpg\"\r\n    },\r\n    \"void-bolt\": {\r\n        displayName: \"Void Bolt\",\r\n        keybind: {\r\n            key: \"3\",\r\n            keybindText: \"3\"\r\n        },\r\n        icon: \"images/void-bolt.jpg\"\r\n    },\r\n    \"void-eruption\": {\r\n        displayName: \"Void Eruption\",\r\n        keybind: {\r\n            key: \"3\",\r\n            keybindText: \"3\"\r\n        },\r\n        icon: \"images/void-eruption.jpg\"\r\n    },\r\n    \"shadow-word-death\": {\r\n        displayName: \"Shadow Word: Death\",\r\n        keybind: {\r\n            key: \"4\",\r\n            keybindText: \"4\"\r\n        },\r\n        icon: \"images/shadow-word-death.jpg\"\r\n    },\r\n    \"void-torrent\": {\r\n        displayName: \"Void Torrent\",\r\n        keybind: {\r\n            key: \"5\",\r\n            keybindText: \"5\"\r\n        },\r\n        icon: \"images/void-torrent.jpg\"\r\n    },\r\n    \"shadow-word-pain\": {\r\n        displayName: \"Shadow Word: Pain\",\r\n        keybind: {\r\n            key: \"6\",\r\n            keybindText: \"6\"\r\n        },\r\n        icon: \"images/shadow-word-pain.jpg\"\r\n    },\r\n    \"vampiric-touch\": {\r\n        displayName: \"Vampiric Touch\",\r\n        keybind: {\r\n            key: \"7\",\r\n            keybindText: \"7\"\r\n        },\r\n        icon: \"images/vampiric-touch.jpg\"\r\n    }\r\n}\r\n\r\nexport default defaultAbilities","import React from \"react\"\r\n\r\nconst FormTextAreaField = (props) => {\r\n\r\n    const {value, id, label, className, placeHolder, onChange} = props\r\n\r\n    const handleChange = (e) => onChange(id, e.target.value)\r\n\r\n    return (\r\n        <div className={`form-field ${className}`}>\r\n            <label htmlFor={id}>{label}</label>\r\n            <div className={\"form-input-container\"}>\r\n                <textarea className=\"panel-text-area form-input-field\" id={id} value={value} placeholder={placeHolder} required={true} onChange={handleChange} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormTextAreaField","import React from \"react\"\r\n\r\nconst FormTextField = (props) => {\r\n\r\n    const {value, id, label, placeHolder, onChange} = props\r\n\r\n    const handleChange = (e) => onChange(id, e.target.value)\r\n\r\n    return (\r\n        <div className=\"form-text-field form-title\">\r\n            <label className=\"form-input-title\" htmlFor={id}>{label}</label>\r\n            <input className=\"panel-text-area form-input-field\" type=\"text\" id={id} value={value} placeholder={placeHolder} required={true} onChange={handleChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormTextField","const email = window.Email\r\n\r\nconst formatBugReportContent = (body) => {\r\n    const appHeader = \"<h1>Bug Report for Voidform Optimizer</h1>\\n\"\r\n    const descriptionHeader = \"<h3>Give a brief description of the issue</h3>\"\r\n    //const reproductionHeader = \"### How can this issue be reproduced?\"\r\n    const expectedBehaviorHeader = \"<h3>What is the expected behavior?</h3>\"\r\n    const actualBehaviorHeader = \"<h3>What is the actual behavior?</h3>\"\r\n\r\n    const headers = [descriptionHeader, expectedBehaviorHeader, actualBehaviorHeader]\r\n\r\n    const userContent = Object.keys(body).reduce((content, key, i) => {\r\n        return content.concat([headers[i], body[key]])\r\n    }, []).join(\"\\n\")\r\n\r\n    return appHeader + userContent\r\n}\r\n\r\nconst sendBugReport = async (title, content) => {\r\n    const data = {\r\n        SecureToken: process.env.REACT_APP_SMTP_ACCESS_TOKEN,\r\n        From: process.env.REACT_APP_SENDER_GMAIL_USER,\r\n        To: process.env.REACT_APP_RECEIVER_GMAIL_USER,\r\n        Subject: title,\r\n        Body: content\r\n    }\r\n\r\n    const result = await email.send(data)\r\n\r\n    if(result !== \"OK\") throw new Error(result)\r\n}\r\n\r\nexport const submitBugReport = async (data, onSuccess, onFail) => {\r\n\r\n    const {title, ...body} = data\r\n\r\n    const content = formatBugReportContent(body)\r\n\r\n    try {\r\n        await sendBugReport(`[BUG] ${title}`, content)\r\n        onSuccess()\r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n        onFail()\r\n    }\r\n}\r\n\r\nexport const createPendingTextTimer = (text, setText) => {\r\n    const dot = \".\"\r\n    let i = 1\r\n\r\n    setText(text)\r\n    \r\n    const timer = setInterval(() => {\r\n        const count = i % 4\r\n\r\n        setText(`${text}${dot.repeat(count)}`)\r\n\r\n        i++\r\n    }, 500);\r\n\r\n    return timer\r\n}\r\n","import React, {useState} from \"react\"\r\nimport Form from \"./Form\"\r\nimport FormTextAreaField from \"./FormTextAreaField\"\r\nimport FormTextField from \"./FormTextField\"\r\nimport {submitBugReport, createPendingTextTimer} from \"../../utils/bugreport\"\r\n\r\nconst fields = [{\r\n    id: \"bug-report-description\",\r\n    label: \"Description\",\r\n    className: \"form-field-small\"\r\n    // placeHolder: \"Enter a description of the bug...\"\r\n},\r\n{\r\n    id: \"bug-report-expected\",\r\n    label: \"Expected Behavior\",\r\n    className: \"form-field-medium\"\r\n    // placeHolder: \"Enter the expected behavior...\"\r\n},\r\n{\r\n    id: \"bug-report-actual\",\r\n    label: \"Actual Behavior\",\r\n    className: \"form-field-medium\"\r\n    // placeHolder: \"Enter the actual behavior...\"\r\n}]\r\n\r\nconst titleField = {\r\n    id: \"title\",\r\n    label: \"Title\"\r\n}\r\n\r\nconst formTitle = \"Bug Report\"\r\n\r\nconst submitPending = \"Submitting\"\r\nconst submitSuccess = \"Bug report successfully submitted!\"\r\nconst submitFail = \"Failed to submit bug report\"\r\n\r\nconst BugReport = (props) => {\r\n\r\n    const {closeForm} = props\r\n    const [data, setData] = useState({})\r\n    const [canSubmit, setCanSubmit] = useState(true)\r\n    const [submitMessage, setSubmitMessage] = useState(\"\")\r\n\r\n    const onChange = (id, value) => {\r\n        setData({...data, [id]: value})\r\n    }\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        const timer = createPendingTextTimer(submitPending, setSubmitMessage)\r\n\r\n        const onSuccess = () => {\r\n            clearInterval(timer)\r\n            setSubmitMessage(submitSuccess)\r\n        }\r\n        const onFail = () => {\r\n            clearInterval(timer)\r\n            setSubmitMessage(submitFail)\r\n        }\r\n\r\n        submitBugReport(data, onSuccess, onFail)\r\n        setCanSubmit(false)\r\n    }\r\n\r\n    return <div className=\"modal\">\r\n        <div className=\"modal-content panel\">\r\n            <div className=\"form-title\">\r\n                {formTitle}\r\n            </div>\r\n            <form className=\"form\" onSubmit={onSubmit}>\r\n                <FormTextField value={data.title} {...titleField} onChange={onChange} />\r\n                {fields.map(f => <FormTextAreaField key={f.id} value={data[f.id]} {...f} onChange={onChange} />)}\r\n                <div>\r\n                    <input className=\"panel-button\" type=\"submit\" value=\"Submit\" disabled={!canSubmit} />\r\n                </div>\r\n            </form>\r\n            <div>\r\n                {submitMessage}\r\n            </div>\r\n            <button className=\"panel-button panel-exit-button\" onClick={closeForm}>x</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default BugReport","import React, {useState} from \"react\"\r\nimport Form from \"./Form\"\r\nimport FormTextAreaField from \"./FormTextAreaField\"\r\nimport FormTextField from \"./FormTextField\"\r\n\r\nconst fields = []\r\n\r\nconst submitSuccess = \"Feature request successfully submitted!\"\r\nconst submitFail = \"Failed to submit feature request\"\r\n\r\nconst FeatureRequest = (props) => {\r\n\r\n    const {closeForm} = props\r\n\r\n    return <div className=\"modal\">\r\n        <div className=\"modal-content panel\">\r\n            Coming soon!\r\n            <button className=\"panel-button panel-exit-button\" onClick={closeForm}>x</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default FeatureRequest","import React, {useState} from \"react\"\r\nimport BugReport from \"./BugReport\"\r\nimport FeatureRequest from \"./FeatureRequest\"\r\nimport \"./Form.css\"\r\nimport \"../panels/Panel.css\"\r\nimport \"../panels/SettingOption.css\"\r\n\r\nconst Forms = () => {\r\n\r\n    const [showBugReport, setShowBugReport] = useState(false)\r\n    const [showFeatureRequest, setShowFeatureRequest] = useState(false)\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"forms-container\">\r\n            <div>\r\n                <button className=\"panel-button\" onClick={() => setShowBugReport(true)}>Report a Bug</button>\r\n                <button className=\"panel-button\" onClick={() => setShowFeatureRequest(true)}>Request a Feature</button>\r\n            </div>\r\n                {showBugReport ? <BugReport closeForm={() => setShowBugReport(false)} /> : null} \r\n                {showFeatureRequest ? <FeatureRequest closeForm={() => setShowFeatureRequest(false)} /> : null} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Forms","import React, {useState, useEffect, useReducer} from 'react';\r\nimport './App.css';\r\nimport ResourceBar from \"./components/ResourceBar\"\r\nimport AbilityBar from \"./components/AbilityBar\"\r\nimport AuraBar from \"./components/auras/AuraBar\"\r\nimport ExportPanel from \"./components/panels/ExportPanel\"\r\nimport SettingsPanel from \"./components/panels/SettingsPanel\"\r\nimport AbilityKeybindsPanel from \"./components/panels/AbilityKeybindsPanel\"\r\nimport AboutPanel from \"./components/panels/AboutPanel\"\r\nimport defaultAbilities from \"./lib/abilities\"\r\nimport defaultAbilitySettings from \"./lib/abilitySettings\"\r\nimport defaultAuraSettings from \"./lib/auraSettings\"\r\nimport Forms from \"./components/forms/Forms\"\r\n\r\nconst App = () => {\r\n\r\n  const [panel, setPanel] = useState()\r\n  const [abilitySettings, setAbilitySettings] = useState(defaultAbilitySettings)\r\n  const [abilities, setAbilities] = useState(defaultAbilities)\r\n  const [auraSettings, setAuraSettings] = useState(defaultAuraSettings)\r\n  const [keyEventsPaused, setKeyEventsPaused] = useState(false)\r\n  const [reset, setReset] = useState(false)\r\n  const [haste, setHaste] = useState(0)\r\n\r\n  const defaultState = {\r\n    resource: 0,\r\n    auras: {\r\n      stats: {\r\n        haste\r\n      },\r\n      voidform: {\r\n        active: false,\r\n        stacks: 0,\r\n        haste: 0,\r\n        paused: false,\r\n      },\r\n      lingeringInsanity: {\r\n        active: false,\r\n        stacks: 0,\r\n        haste: 0\r\n      },\r\n      \"shadow-word-pain\": {\r\n        active: false,\r\n        maxDuration: 16000\r\n      },\r\n      \"vampiric-touch\": {\r\n        active: false,\r\n        maxDuration: 24000\r\n      }\r\n    },\r\n    abilities: {\r\n      \"void-eruption\": {\r\n        unusable: true\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleAuraPandemic = (aura, baseDuration, now) => {\r\n    const endTime = aura.startTime + aura.maxDuration\r\n    const remaining = endTime - now\r\n    const pandemicDuration = Math.min(.3 * baseDuration, remaining)\r\n\r\n    aura.maxDuration = baseDuration + pandemicDuration\r\n    aura.startTime = now\r\n  }\r\n\r\n  const [state, updateState] = useReducer((state, action) => {\r\n\r\n    let event = action.type\r\n    let newState = JSON.parse(JSON.stringify(state))\r\n\r\n    const voidform = newState.auras.voidform\r\n    const lingeringInsanity = newState.auras.lingeringInsanity\r\n\r\n    switch(event) {\r\n      case \"RESET\":\r\n        return defaultState\r\n      case \"RESET_ABILITIES\":\r\n        return {...defaultState, auras: state.auras}\r\n      case \"RESET_AURAS\":\r\n        const n = {...newState, auras: {...defaultState.auras, stats: state.auras.stats} }\r\n        console.log(n)\r\n        return {...newState, auras: {...defaultState.auras, stats: state.auras.stats} }\r\n      case \"HASTE_SET\":\r\n        var {source, haste} = action.payload\r\n        newState.auras[source].haste = haste\r\n        break\r\n      case \"HASTE_UPDATE\":\r\n        var {source, haste} = action.payload\r\n        newState.auras[source].haste += haste\r\n        break\r\n      case \"VOIDFORM_UPDATE\":\r\n        voidform.stacks++\r\n        voidform.haste += action.payload\r\n        break;\r\n      case \"VOIDFORM_START\":\r\n        voidform.active = true\r\n        voidform.stacks = 1\r\n        break;\r\n      case \"VOIDFORM_END\":\r\n        var {time, startingHaste} = action.payload\r\n        lingeringInsanity.active = true\r\n        lingeringInsanity.stacks = voidform.stacks\r\n        lingeringInsanity.haste = Math.round((voidform.haste - startingHaste)*1000)/1000\r\n        lingeringInsanity.startTime = time\r\n        voidform.stacks = 0\r\n        voidform.haste = 0\r\n        newState.abilities[\"void-eruption\"].unusable = true\r\n        break;\r\n      case \"LINGERING_INSANITY_START\":\r\n        var {haste, stacks} = action.payload\r\n        lingeringInsanity.haste = haste\r\n        lingeringInsanity.stacks = stacks\r\n        break;\r\n      case \"LINGERING_INSANITY_UPDATE\":\r\n        lingeringInsanity.haste += action.payload\r\n        lingeringInsanity.stacks--\r\n        if(lingeringInsanity.haste <= 0) lingeringInsanity.haste = 0\r\n        break;\r\n      case \"LINGERING_INSANITY_END\":\r\n        lingeringInsanity.active = false\r\n        lingeringInsanity.stacks = 0\r\n        lingeringInsanity.haste = 0\r\n        lingeringInsanity.startTime = 0\r\n        break;\r\n      case \"RESOURCE_UPDATE\":\r\n        let resource = Math.max(Math.min(newState.resource + action.payload.resource, 100), 0)\r\n        newState.resource = resource\r\n        if(resource <= 0 && voidform.active) {\r\n          voidform.active = false\r\n        }\r\n        if(!voidform.active && resource >= abilitySettings[\"void-eruption\"].threshold) {\r\n          newState.abilities[\"void-eruption\"].unusable = false\r\n        }\r\n        break;\r\n      case \"INSANITY_DRAIN_PAUSE_START\":\r\n        voidform.paused = true\r\n        break\r\n      case \"INSANITY_DRAIN_PAUSE_END\":\r\n        voidform.paused = false\r\n        break\r\n      case \"AURA_START\":\r\n        var {name, time} = action.payload\r\n        var aura = newState.auras[name]\r\n\r\n        aura.active ? handleAuraPandemic(aura, auraSettings[name].baseDuration, time) : aura.active = true\r\n        break\r\n      case \"AURA_BEGIN\":\r\n        var {name, time, duration} = action.payload\r\n        newState.auras[name].startTime = time\r\n        newState.auras[name].maxDuration = duration\r\n        break\r\n      case \"AURA_REFRESH\":\r\n        var {name, time} = action.payload\r\n        newState.auras[name].startTime = time\r\n        break\r\n      case \"AURA_END\":\r\n        var {name} = action.payload\r\n        newState.auras[name].active = false\r\n        newState.auras[name].startTime = 0\r\n        break\r\n      case \"DOT_EXTEND\":\r\n        const extension = abilitySettings[\"void-bolt\"].extension\r\n        const dots = [\"shadow-word-pain\", \"vampiric-touch\"]\r\n        dots.forEach(d => {\r\n          const dot = newState.auras[d]\r\n          if(!dot.active) return\r\n          dot.maxDuration += extension\r\n        })\r\n        break\r\n    }\r\n\r\n    return newState\r\n  }, defaultState)\r\n\r\n  useEffect(() => {\r\n    setHaste(calculateHaste)\r\n  }, [state.auras.stats.haste,\r\n    state.auras.voidform.haste,\r\n    state.auras.lingeringInsanity.haste])\r\n\r\n  const enterVoidform = () => {\r\n    updateState({\r\n      type: \"VOIDFORM_START\"\r\n    })\r\n  }\r\n\r\n  const gainInsanity = () => {\r\n    updateState({\r\n      type: \"RESOURCE_UPDATE\",\r\n      payload: {\r\n        resource: 10\r\n      }\r\n    })\r\n  }\r\n\r\n  const calculateHaste = () => {\r\n    const auras = state.auras\r\n    return Object.keys(auras).reduce((haste, aura) => {\r\n      if(!auras[aura].haste) return haste\r\n      return haste * (1+auras[aura].haste)\r\n    }, 1)\r\n  }\r\n\r\n  const handlePanelHeaderClick = (panel) => {\r\n    setKeyEventsPaused(true)\r\n    setPanel(panel)\r\n  }\r\n\r\n  const handlePanelClose = () => {\r\n    setKeyEventsPaused(false)\r\n    setPanel(null)\r\n  }\r\n\r\n  const handleAbilityToggle = (ability) => {\r\n    let newSettings = JSON.parse(JSON.stringify(abilities))\r\n\r\n    newSettings[ability].disabled = !newSettings[ability].disabled\r\n    if(ability === \"void-bolt\") newSettings[\"void-eruption\"].disabled = newSettings[ability].disabled\r\n\r\n    setAbilities(newSettings)\r\n  }\r\n\r\n  const setKeyBind = (keybind, ability) => {\r\n    let state = JSON.parse(JSON.stringify(abilities))\r\n    let key = keybind.key\r\n    let voidBoltOrEruption = ability === \"void-bolt\" || ability === \"void-eruption\"\r\n    Object.keys(state).forEach(k => {\r\n      let abilityKeybind = state[k].keybind\r\n      if(abilityKeybind.key === key) state[k].keybind = { keybindText: \"--\"}\r\n    })\r\n    if(voidBoltOrEruption) {\r\n      state[\"void-bolt\"].keybind = {...keybind}\r\n      state[\"void-eruption\"].keybind = {...keybind}\r\n    }\r\n    else {\r\n      state[ability].keybind = {...keybind}\r\n    }\r\n\r\n    setAbilities(state)\r\n  }\r\n\r\n  const handleImport = (settings) => {\r\n    setAllAbilities(settings.abilityConfig)\r\n    handleAbilitySet(settings.abilitySettings)\r\n    handleAuraSet(settings.auraSettings)\r\n  }\r\n\r\n  const setAllAbilities = (importedAbilities) => {\r\n    let state = Object.keys(abilities).reduce((state, ability) => {\r\n      state[ability] = {...abilities[ability], ...importedAbilities[ability]}\r\n      return state\r\n    }, {})\r\n\r\n    setAbilities(state)\r\n  }\r\n\r\n  const mergeAbilities = () => {\r\n    return Object.keys(abilities).reduce((merged, a) => {\r\n      merged[a] = {...abilities[a], ...state.abilities[a]}\r\n      return merged\r\n    }, {})\r\n  }\r\n\r\n  const abilitySettingsWithDisplayName = () => {\r\n    return Object.keys(abilitySettings).reduce((merged, a) => {\r\n      merged[a] = {...abilitySettings[a], displayName: defaultAbilities[a].displayName}\r\n      return merged\r\n    }, {}) \r\n  }\r\n\r\n  const handleAuraSet = (auraSettings) => {\r\n    handleAuraReset()\r\n    setAuraSettings(auraSettings)\r\n    const haste = auraSettings.stats.haste\r\n    updateState({\r\n      type: \"HASTE_SET\",\r\n      payload: {\r\n        source: \"stats\",\r\n        haste\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleAbilitySet = (abilitySettings) => {\r\n    handleAbilityReset()\r\n    setAbilitySettings(abilitySettings)\r\n  }\r\n\r\n  const handleAbilityReset = () => {\r\n    setReset(!reset)\r\n    updateState({\r\n      type: \"RESET_ABILITIES\"\r\n    })\r\n    updateState({\r\n      type: \"RESOURCE_UPDATE\",\r\n      payload: {\r\n        resource: 0\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleAuraReset = () => {\r\n    updateState({\r\n      type: \"RESET_AURAS\"\r\n    })\r\n  }\r\n\r\n  const handleReset = () => {\r\n    handleAbilityReset()\r\n    handleAuraReset()\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header header-panel\">\r\n        <div className=\"App-title\">\r\n          <div className=\"App-title-text\">\r\n            Voidform Optimizer\r\n          </div>\r\n        </div>\r\n        <div className=\"panel-container\">\r\n          <SettingsPanel settings={{abilities: abilitySettingsWithDisplayName(), auras: auraSettings}} onAbilitySet={handleAbilitySet} onAuraSet={handleAuraSet} currentPanel={panel} onClick={handlePanelHeaderClick} closePanel={handlePanelClose} />\r\n          <AbilityKeybindsPanel abilities={abilities} currentPanel={panel} onKeybind={setKeyBind} onToggle={handleAbilityToggle} onClick={handlePanelHeaderClick} closePanel={handlePanelClose} />\r\n          <ExportPanel settings={{abilitySettings, auraSettings, abilities}} onImport={handleImport} currentPanel={panel} onClick={handlePanelHeaderClick} closePanel={handlePanelClose}/>\r\n          <AboutPanel currentPanel={panel} onClick={handlePanelHeaderClick} closePanel={handlePanelClose} />\r\n        </div>\r\n        <Forms />\r\n      </header>\r\n      <div className=\"App-content\">\r\n        <AuraBar auras={state.auras} settings={auraSettings} haste={haste} triggerEvent={updateState} />\r\n        <ResourceBar current={state.resource} max={100}/>\r\n        <AbilityBar abilitySettings={abilitySettings} abilities={mergeAbilities()} haste={haste} inVoidform={state.auras.voidform.active} triggerEvent={updateState} keyEventsPaused={keyEventsPaused} reset={reset} />\r\n        <button className=\"panel-button\" onClick={handleReset}>Reset</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport dotenv from \"dotenv\"\r\n\r\ndotenv.config()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}